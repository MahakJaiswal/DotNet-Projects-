Controller Code-

1.DashboardController-

using Digital_Management.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Data;

namespace Digital_Management.Controllers
{
    public class DashboardController : Controller
    {
        public IActionResult VisitorDashboard()
        {
            Cls_Dashboard _obj = new Cls_Dashboard();
            _obj._VisitorList = new List<Cls_Dashboard>();
            DataTable dt = _obj.Select_VisitorList(HttpContext.Session.GetString("sysbranchuuid"));
            _obj._VisitorList = BindData(dt);

            return View(_obj);
        }

        public List<Cls_Dashboard> BindData(DataTable dt)
        {
            List<Cls_Dashboard> lst = new List<Cls_Dashboard>();
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    var url = HttpContext.Request.Scheme + "://" + HttpContext.Request.Host + "/api/GetEmployeeImageBlob/" + dr["visitor_id"].ToString();

                    lst.Add(new Cls_Dashboard()
                    {
                        Photo = url,
                        SysVisitorUUId = dr["SysVisitorUUId"].ToString(),
                        first_name = dr["firstname"].ToString(),
                        Entry_time = dr["Entry_time"].ToString(),
                        VisitorCardNo = dr["Visitor_CardNo"].ToString(),
                        PurposeOfVisit = dr["PurposeOfVisiting"].ToString(),
                        Department = dr["Department"].ToString(),
                        whom_to_meet = dr["whomtomeet"].ToString(),
                        Company_name = dr["Company_name"].ToString(),
                        Address = dr["Address"].ToString(),
                        Exit_time = dr["Exit_time"].ToString(),
                        Status = dr["Status"].ToString(),

                        //Firstname = dr["FirstName"].ToString().ToUpper(),
                        //Lastname = dr["Lastname"].ToString().ToUpper(),
                        //Emailid = dr["Emailid"].ToString().ToUpper(),
                        //Phone = dr["Phone"].ToString(),
                        //Id_proof = dr["Id_proof"].ToString(),
                        //Postedby = dr["Postedby"].ToString(),
                        //Posteddatetime = dr["Posteddatetime"].ToString(),

                    });
                }
            }
            return lst;
        }

       

    }
}

2.DepartmentController-

using Digital_Management.Models;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;

namespace Digital_Management.Controllers
{
    public class DepartmentController : Controller
    {
        private IWebHostEnvironment Environment;
        private IConfiguration Configuration;
        public DepartmentController(IWebHostEnvironment _environment, IConfiguration _configuration)
        {
            Environment = _environment;
            Configuration = _configuration;
        }

        public IActionResult DepartmentMaster()
        {
            Cls_Department _obj = new Cls_Department();
            _obj._List = new List<Cls_Department>();
            DataTable ds = _obj.Select_Department(HttpContext.Session.GetString("sysbranchuuid"));
            _obj._List = BindData(ds);

            return View(_obj);
        }


        public List<Cls_Department> BindData(DataTable ds)
        {
            List<Cls_Department> lst = new List<Cls_Department>();
            if (ds != null && ds.Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Rows)
                {

                    lst.Add(new Cls_Department()
                    {

                        LineId = Convert.ToInt32(dr["LineId"].ToString()),
                        SysDepartmentuuidId = dr["sysdepartmentuuid"].ToString().ToUpper(),
                        Department = dr["Department"].ToString(),
                        PostedBy = dr["Accounttype"].ToString().ToUpper(),
                        PostedDateTime = dr["PostedDateTime"].ToString().ToUpper(),
                        

                    });
                }
            }
            return lst;
        }

        [HttpPost]
        public IActionResult DepartmentMaster(Cls_Department _obj, Microsoft.AspNetCore.Http.IFormFile postedFile, IFormCollection form, string save, string Upload, string Update, string Confirm)
        {

            List<Cls_Department> _uploadList = new List<Cls_Department>();
            if (ModelState.IsValid)
            {
                _obj.PostedBy = HttpContext.Session.GetString("sysbranchuuid");

                if (!string.IsNullOrEmpty(save))
                {
                    
                    _obj.LineId = 0;
                    DataTable dtSave = _obj.Insert_VisitorList(_obj);
                    if (dtSave != null && dtSave.Rows.Count > 0)
                    {
                        if (dtSave.Rows[0][0].ToString() == "True")
                        {
                            ViewBag.Message = "Master Employee Created Successfully";
                        }
                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }
                
                DataTable dt = _obj.Select_Department((HttpContext.Session.GetString("sysbranchuuid")));
                _obj._List = BindData(dt);

            }
            return View(_obj);
        }

        public IActionResult AddDepartmentMaster()
        {
            Cls_Department Dp = new Cls_Department();
            return PartialView("AddDepartmentMaster", Dp);
        }
    }
}


3.EmployeeController-

using Digital_Management.Models;
using ExcelDataReader;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.CodeAnalysis;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;

namespace Digital_Management.Controllers
{
    public class EmployeeController : Controller
    {
        private IWebHostEnvironment Environment;
        private IConfiguration Configuration;
        public EmployeeController(IWebHostEnvironment _environment, IConfiguration _configuration)
        {
            Environment = _environment;
            Configuration = _configuration;
        }

        public IActionResult EmployeeMaster()
        {
            Cls_Employee _obj = new Cls_Employee();
            _obj._List = new List<Cls_Employee>();
            DataTable ds = _obj.Get_EmployeeData(HttpContext.Session.GetString("sysbranchuuid"));
            _obj._List = BindData(ds);

            return View(_obj);
        }

        public List<Cls_Employee> BindData(DataTable ds)
        {
            List<Cls_Employee> lst = new List<Cls_Employee>();
            if (ds != null && ds.Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Rows)
                {

                    lst.Add(new Cls_Employee()
                    {
                        LineId = Convert.ToInt32(dr["LineId"].ToString()),
                        //Photo = url,
                        EmployeeId = dr["Empid"].ToString(),
                        FirstName = dr["FirstName"].ToString().ToUpper(),
                        LastName = dr["LastName"].ToString().ToUpper(),
                        EmailId = dr["EmailId"].ToString().ToUpper(),
                        Phone = dr["Phone"].ToString().ToUpper(),
                        Department = dr["Department"].ToString(),
                        Location = dr["baselocation"].ToString(),
                        Postedby = dr["Postedby"].ToString(),
                        PostedDateTime = dr["posteddatetime"].ToString(),
                        Status = dr["status"].ToString(),

                    });
                }
            }
            return lst;
        }

        [HttpPost]
        public IActionResult EmployeeMaster(Cls_Employee _obj, Microsoft.AspNetCore.Http.IFormFile postedFile, IFormCollection form, string save, string Upload, string Update, string Confirm, string status)
        {

            List<Cls_Employee> _uploadList = new List<Cls_Employee>();
            if (ModelState.IsValid)
            {
                _obj.Postedby = HttpContext.Session.GetString("sysbranchuuid");
                _obj.Location = HttpContext.Session.GetString("branchname");
                if (!string.IsNullOrEmpty(save))
                {

                    _obj.LineId = 0;
                    DataTable dtSave = _obj.Post_MasterEmployee(_obj);
                    if (dtSave != null && dtSave.Rows.Count > 0)
                    {
                        if (dtSave.Rows[0][0].ToString() == "True")
                        {
                            ViewBag.Message = "Master Employee Created Successfully";
                        }
                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }
                //if (!string.IsNullOrEmpty(Update))
                //{
                //    DataTable dtUpdate = _obj.Update_VisitorList(_obj);
                //    if (dtUpdate != null && dtUpdate.Rows.Count > 0)
                //    {

                //        ViewBag.Message = "Employee Updated Successfully";

                //        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                //        ModelState.Clear();
                //    }
                //    else
                //    {
                //        ViewBag.Message = "An error occurred.";
                //        ModelState.Clear();
                //    }
                //}

                if (!string.IsNullOrEmpty(Upload))
                {
                    string wwwPath = this.Environment.WebRootPath;
                    string contentPath = this.Environment.ContentRootPath;

                    string path = Path.Combine(this.Environment.WebRootPath, "Uploads");
                    if (!Directory.Exists(path))
                    {
                        Directory.CreateDirectory(path);
                    }

                    string fileName = Path.GetFileName(postedFile.FileName);

                    using (FileStream stream = new FileStream(Path.Combine(path, fileName), FileMode.Create))
                    {
                        postedFile.CopyTo(stream);

                        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);

                        using (var reader = ExcelReaderFactory.CreateReader(stream))
                        {
                            reader.Read();
                            while (reader.Read()) //Each row of the file
                            {
                                _obj.EmployeeId = reader.GetValue(0).ToString();
                                _obj.FirstName = reader.GetValue(1).ToString();
                                _obj.LastName = reader.GetValue(2).ToString();
                                _obj.EmailId = reader.GetValue(3).ToString();
                                _obj.Phone = reader.GetValue(4).ToString();
                                _obj.selDepartmentId = reader.GetValue(5).ToString();
                               

                                _obj.Post_MasterEmployee(_obj);

                                _uploadList.Add(new Models.Cls_Employee  //sending the filedata to model
                                {
                                    EmployeeId = reader.GetValue(0).ToString(),
                                    FirstName = reader.GetValue(1).ToString(),
                                    LastName = reader.GetValue(2).ToString(),
                                    EmailId = reader.GetValue(3).ToString(),
                                    Phone = reader.GetValue(4).ToString(),
                                    selDepartmentId = reader.GetValue(5).ToString(),
                                    

                                });

                            }
                        }
                    }

                }

                if (!string.IsNullOrEmpty(status))
                {
                    _obj.Postedby = HttpContext.Session.GetString("sysbranchuuid");
                    DataTable dtstatus = _obj.Update_EmployeeStatus(_obj);
                    if (dtstatus != null && dtstatus.Rows.Count > 0)
                    {

                        ViewBag.Message = "Employee Status Updated Successfully.";

                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }


                DataTable dt = _obj.Get_EmployeeData((HttpContext.Session.GetString("sysbranchuuid")));
                _obj._List = BindData(dt);

            }
            return View(_obj);
        }

        public IActionResult EditEmployeeStatus(int lineid)
        {
            Cls_Employee _obj = new Cls_Employee();
            DataTable dt = new DataTable();
            dt = _obj.Select_EmployeeStatus(lineid, (HttpContext.Session.GetString("sysbranchuuid")));
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {

                    _obj.EmployeeName = dr["Employee"].ToString();
                    _obj.Status = dr["status"].ToString();
                }

            }
            _obj.StatusList = StatusList();
            return PartialView("EditEmployeeStatus", _obj);
        }
        public List<SelectListItem> StatusList()
        {
            List<SelectListItem> _lst = new List<SelectListItem>();
            _lst.Add(new SelectListItem { Text = "Active", Value = "Active" });
            _lst.Add(new SelectListItem { Text = "InActive", Value = "InActive" });
            return _lst;
        }


        public IActionResult AddEmployeeMaster()
        {
            Cls_Employee _obj = new Cls_Employee();
            DataTable dt = _obj.Select_DepartmentDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            _obj.DepartmentDDL = BindDepartment(dt);

            return PartialView("AddEmployeeMaster", _obj);

        }

        public List<SelectListItem> BindDepartment(DataTable dt)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt != null && dt.Rows.Count > 0)
            {
                //if (rType == "Trip")
                //{
                //    object[] objrow = new object[] { "0", "Select Vehicle" };
                //    DataRow toInsert = dt.NewRow();
                //    toInsert.ItemArray = objrow;
                //    dt.Rows.InsertAt(toInsert, 0);
                //}
                foreach (DataRow dr in dt.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }
    }
}

4.ExistingVisitorController-

using Digital_Management.Models;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;

namespace Digital_Management.Controllers
{
    public class ExisitingVisitorController : Controller
    {

        private IWebHostEnvironment Environment;
        private IConfiguration Configuration;
        public ExisitingVisitorController(IWebHostEnvironment _environment, IConfiguration _configuration)
        {
            Environment = _environment;
            Configuration = _configuration;
        }

        public IActionResult ExisitingVisitorMaster()
        {
            Cls_Visitor _obj = new Cls_Visitor();
            _obj._List = new List<Cls_Visitor>();
            DataTable ds = _obj.Select_Existing_Visitor(HttpContext.Session.GetString("sysbranchuuid"));
            _obj._List = BindExisitingData(ds);

            return View(_obj);
        }


        public List<Cls_Visitor> BindExisitingData(DataTable ds)
        {
            List<Cls_Visitor> lst = new List<Cls_Visitor>();
            if (ds != null && ds.Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Rows)
                {
                    var url = HttpContext.Request.Scheme + "://" + HttpContext.Request.Host + "/api/GetEmployeeImageBlob/" + dr["visitor_id"].ToString();

                    lst.Add(new Cls_Visitor()
                    {
                        Visitor_id = (dr["Visitor_id"].ToString()),
                        Photo = url,
                        Entry_time = dr["Entry_time"].ToString(),
                        Firstname = dr["FirstName"].ToString().ToUpper(),
                        Lastname = dr["Lastname"].ToString().ToUpper(),
                        Emailid = dr["Emailid"].ToString().ToUpper(),
                        Total_hrs = string.IsNullOrEmpty(dr["totalhrs"].ToString()) ? "N/A" : dr["totalhrs"].ToString(),
                        Status = dr["Status"].ToString(),
                        Phone = dr["Phone"].ToString(),
                        Id_proof = dr["Id_proof"].ToString(),
                        VisitorCardNo = dr["Visitor_CardNo"].ToString(),
                        PurposeOfVisit = dr["PurposeOfVisiting"].ToString(),
                        Department = dr["Department"].ToString(),
                        whom_to_meet = dr["whomtomeet"].ToString(),
                        Company_name = dr["Company_name"].ToString(),
                        Address = dr["Address"].ToString(),
                        Exit_time = string.IsNullOrEmpty(dr["Exit_time"].ToString()) ? "N/A" : dr["Exit_time"].ToString(),
                        Postedby = dr["Postedby"].ToString(),
                        Posteddatetime = dr["Posteddatetime"].ToString(),


                    });
                }
            }
            return lst;
        }


        [HttpPost]
        public IActionResult ExisitingVisitorMaster(Cls_Visitor _obj, Microsoft.AspNetCore.Http.IFormFile postedFile, IFormCollection form, string save, string Upload, string Update, string Confirm)
        {

            List<Cls_Visitor> _uploadList = new List<Cls_Visitor>();
            if (ModelState.IsValid)
            {
                _obj.Postedby = HttpContext.Session.GetString("sysbranchuuid");
                _obj.Branch = HttpContext.Session.GetString("branchname");
                //var url = HttpContext.Request.Scheme + "://" + HttpContext.Request.Host + "/api/GetEmployeeImageBlob/" + dr["visitor_id"].ToString();

                if (!string.IsNullOrEmpty(save))
                {
                    if (postedFile != null)
                    {
                        string path = Path.Combine(Environment.ContentRootPath, "ProfilePhoto");
                        if (!Directory.Exists(path))
                        {
                            Directory.CreateDirectory(path);
                        }

                        //Save the uploaded  file.
                        string fileName = DateTime.Now.Ticks.ToString() + "_" + Path.GetFileName(postedFile.FileName);
                        string filePath = Path.Combine(path, fileName);
                        using (FileStream stream = new FileStream(filePath, FileMode.Create))
                        {
                            postedFile.CopyTo(stream);
                        }
                        byte[] imageArray = System.IO.File.ReadAllBytes(filePath);
                        string base64ImageRepresentation = Convert.ToBase64String(imageArray);
                        if (System.IO.File.Exists(filePath))
                        {
                            System.IO.File.Delete(filePath);
                        }

                        _obj.Photo = base64ImageRepresentation;
                    }
                    else
                    {
                        _obj.Photo = "";
                    }


                    _obj.LineId = 0;
                    DataTable dtSave = _obj.Insert_VisitorList(_obj);
                    if (dtSave != null && dtSave.Rows.Count > 0)
                    {
                        if (dtSave.Rows[0][0].ToString() == "True")
                        {
                            ViewBag.Message = "Master Employee Created Successfully";
                        }
                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }
                


                DataTable dt = _obj.Select_Existing_Visitor((HttpContext.Session.GetString("sysbranchuuid")));
                _obj._List = BindExisitingData(dt);

            }
            return View(_obj);
        }



        public IActionResult AddExisitingVisitorMaster(string Visitor_id)
        {
            Cls_Visitor ep = new Cls_Visitor();
            DataTable dts = new DataTable();
            dts = ep.Select_VisitorDetails(Visitor_id);


            if (dts != null && dts.Rows.Count > 0)
            {

                foreach (DataRow dr in dts.Rows)
                {
                    var url = HttpContext.Request.Scheme + "://" + HttpContext.Request.Host + "/api/GetEmployeeImageBlob/" + dr["visitor_id"].ToString();


                    ep.Visitor_id = (dr["Visitor_id"].ToString());
                    ep.Photo = url;
                    ep.Entry_time = dr["Entry_time"].ToString();
                    ep.Firstname = dr["FirstName"].ToString().ToUpper();
                    ep.Lastname = dr["Lastname"].ToString().ToUpper();
                    ep.Emailid = dr["Emailid"].ToString().ToUpper();
                    ep.Accessories = dr["Accessories"].ToString();
                    ep.Phone = dr["Phone"].ToString();
                    ep.Id_proof = dr["Id_proof"].ToString();

                    ep.VisitorCardNo = dr["Visitor_CardNo"].ToString();
                    ep.PurposeOfVisit = dr["PurposeOfVisiting"].ToString();
                    ep.Department = dr["Department"].ToString();
                    ep.whom_to_meet = dr["whomtomeet"].ToString();
                    ep.Company_name = dr["Company_name"].ToString();
                    ep.Address = dr["Address"].ToString();
                    ep.Branch = dr["Branch"].ToString();
                    ep.Exit_time = dr["Exit_time"].ToString();
                    ep.Postedby = dr["Postedby"].ToString();
                    ep.Posteddatetime = dr["Posteddatetime"].ToString();
                }
            }


            DataTable dt = ep.Select_DepartmentDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            DataTable dt2 = ep.Select_EmployeeDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            DataTable dt3 = ep.Select_IdproofDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            DataTable dt4 = ep.Select_VCardDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            DataTable dt5 = ep.Select_AccessoriesDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            DataTable dt6 = ep.Select_VisitingDropDown((HttpContext.Session.GetString("sysbranchuuid")));

            ep.DepartmentDDL = BindDepartment(dt);
            ep.EmployeeDDL = BindEmployee(dt2);
            ep.Id_proofDDL = BindIdProof(dt3);
            ep.VCardDDL = BindVCard(dt4);
            ep.AccessoriesDDL = BindAccessories(dt5);            
            ep.VisitingPurposeDDL = BindVisiting(dt6);

            return PartialView("AddExisitingVisitorMaster", ep);
        }

        public List<SelectListItem> BindDepartment(DataTable dt)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt != null && dt.Rows.Count > 0)
            {

                foreach (DataRow dr in dt.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }

        public List<SelectListItem> BindEmployee(DataTable dt2)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt2 != null && dt2.Rows.Count > 0)
            {

                foreach (DataRow dr in dt2.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }
        public List<SelectListItem> BindIdProof(DataTable dt3)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt3 != null && dt3.Rows.Count > 0)
            {

                foreach (DataRow dr in dt3.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }
        public List<SelectListItem> BindVCard(DataTable dt4)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt4 != null && dt4.Rows.Count > 0)
            {

                foreach (DataRow dr in dt4.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }
        public List<SelectListItem> BindAccessories(DataTable dt5)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt5 != null && dt5.Rows.Count > 0)
            {

                foreach (DataRow dr in dt5.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }
        public List<SelectListItem> BindVisiting(DataTable dt6)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt6 != null && dt6.Rows.Count > 0)
            {

                foreach (DataRow dr in dt6.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }


    }
}

5.IdProofController-

using Digital_Management.Models;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;

namespace Digital_Management.Controllers
{
    public class IdProofController : Controller
    {
        private IWebHostEnvironment Environment;
        private IConfiguration Configuration;
        public IdProofController(IWebHostEnvironment _environment, IConfiguration _configuration)
        {
            Environment = _environment;
            Configuration = _configuration;
        }


        public IActionResult MasterIdProof()
        {
            Cls_IdProof _obj = new Cls_IdProof();
            _obj._List = new List<Cls_IdProof>();
            DataTable dt = _obj.Select_IdProof((HttpContext.Session.GetString("sysbranchuuid")));
            _obj._List = BindData(dt);

            return View(_obj);


        }
        public List<Cls_IdProof> BindData(DataTable dt)
        {
            List<Cls_IdProof> lst = new List<Cls_IdProof>();
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {

                    lst.Add(new Cls_IdProof()
                    {
                        LineId = Convert.ToInt32(dr["LineId"].ToString()),
                        sysIdproofUUid = dr["sysIdproofUUid"].ToString(),
                        Idproof = dr["Idproof"].ToString(),
                        PostedBy = dr["Accounttype"].ToString(),
                        Posteddatetime = dr["PostedDateTime"].ToString(),
                    });
                }
            }
            return lst;
        }

        [HttpPost]
        public IActionResult MasterIdProof(Cls_IdProof _obj, Microsoft.AspNetCore.Http.IFormFile postedFile, IFormCollection form, string save, string Upload, string Update, string Confirm)
        {

            List<Cls_IdProof> _uploadList = new List<Cls_IdProof>();
            if (ModelState.IsValid)
            {
                _obj.PostedBy = HttpContext.Session.GetString("sysbranchuuid");

                if (!string.IsNullOrEmpty(save))
                {

                    // _obj.SysVisitorCardId = '0';
                    DataTable dtSave = _obj.Insert_IdProof(_obj);
                    if (dtSave != null && dtSave.Rows.Count > 0)
                    {
                        if (dtSave.Rows[0][0].ToString() == "True")
                        {
                            ViewBag.Message = "Visitor Card Added Successfully";
                        }
                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }


                DataTable dt = _obj.Select_IdProof((HttpContext.Session.GetString("sysbranchuuid")));
                _obj._List = BindData(dt);

            }
            return View(_obj);
        }

        public IActionResult AddMasterIdProof()
        {
            Cls_IdProof ep = new Cls_IdProof();

            return PartialView("AddMasterIdProof", ep);
        }
    }
}
6.LoginController-
using Digital_Management.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;

namespace Digital_Management.Controllers
{
    public class LoginController : Controller
    {
        public ActionResult Login()
        {
            Cls_Login person = new Cls_Login();
            person.Message = "";
            return View(person);
        }

        [HttpPost]
        public ActionResult Login(Cls_Login person)
        {
            try
            {
                Cls_Login _Login = new Cls_Login();
                //var UserLower = person.UserName.ToLower();
                var validate = _Login.ValidateUserAccount(person.UserName, person.Password);
                //if (person.UserName == "Admin" && person.Password == "123")

                if (validate.Rows.Count > 0)
                {
                    HttpContext.Session.SetString("sysbranchuuid", validate.Rows[0]["sysbranchuuid"].ToString());
                    //HttpContext.Session.SetString("FirstName", validate.Rows[0]["FirstName"].ToString());
                    HttpContext.Session.SetString("branchname", validate.Rows[0]["branchname"].ToString());
                    HttpContext.Session.SetString("accounttype", validate.Rows[0]["accounttype"].ToString());

                    return RedirectToAction("VisitorMaster", "Visitor");
                }
                else
                {
                    ViewBag.Message = "Invalid username or password!! Please try again.";
                    return View(person);
                }

            }
            catch (Exception ex)
            {
                ViewBag.Message = "An Error Occurred!!";
                return View(person);
            }
        }

        public ActionResult Logout()
        {
            //HttpContext.Session.SetString("UserID", null);
            //HttpContext.Session.Clear();
            Cls_Login _obj = new Cls_Login();
            return View("login", _obj);
        }
    }
}
7.MasterBranchController-

using Digital_Management.Models;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;

namespace Digital_Management.Controllers
{
    public class MasterBranchController : Controller
    {
        private IWebHostEnvironment Environment;
        private IConfiguration Configuration;
        public MasterBranchController(IWebHostEnvironment _environment, IConfiguration _configuration)
        {
            Environment = _environment;
            Configuration = _configuration;
        }

        
        public IActionResult MasterBranch()
        {
            Cls_Branch _obj = new Cls_Branch();
            _obj._List = new List<Cls_Branch>();
            DataTable ds = _obj.Select_MasterBranch((HttpContext.Session.GetString("sysbranchuuid")));
            _obj._List = BindData(ds);

            return View(_obj);
        }

        public List<Cls_Branch> BindData(DataTable ds)
        {
            List<Cls_Branch> lst = new List<Cls_Branch>();
            if (ds != null && ds.Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Rows)
                {

                    lst.Add(new Cls_Branch()
                    {
                        LineID = Convert.ToInt32(dr["LineID"].ToString()),
                        // Photo = url,
                        SysBranchUUid = dr["SysBranchUUid"].ToString(),
                        BranchName = dr["BranchName"].ToString().ToUpper(),
                        Email = dr["Email"].ToString().ToUpper(),
                        Password = dr["Password"].ToString().ToUpper(),
                        Phone = dr["Phone"].ToString(),
                        Locaation = dr["Location"].ToString(),
                        PostedBy = dr["PostedBy"].ToString(),
                        Status = dr["Status"].ToString(),
                        Posteddatetime = dr["Posteddatetime"].ToString(),
                        Accounttype = dr["Accounttype"].ToString(),

                    });
                }
            }
            return lst;
        }

        [HttpPost]
        public IActionResult MasterBranch(Cls_Branch _obj, Microsoft.AspNetCore.Http.IFormFile postedFile, IFormCollection form, string save, string Upload, string Update, string Confirm, string status)
        {

            List<Cls_Branch> _uploadList = new List<Cls_Branch>();
            if (ModelState.IsValid)
            {
                _obj.PostedBy = HttpContext.Session.GetString("sysbranchuuid");
               // _obj.SessionId = HttpContext.Session.GetString("sysbranchuuid");
                

                if (!string.IsNullOrEmpty(save))
                {
                    
                    _obj.LineID = 0;
                    DataTable dtSave = _obj.Post_MasterBranch(_obj);
                    if (dtSave != null && dtSave.Rows.Count > 0)
                    {
                        if (dtSave.Rows[0][0].ToString() == "True")
                        {
                            ViewBag.Message = "Master Employee Created Successfully";
                        }
                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }

                if (!string.IsNullOrEmpty(status))
                {
                    _obj.PostedBy = HttpContext.Session.GetString("sysbranchuuid");
                    DataTable dtstatus = _obj.Update_BranchStatus(_obj);
                    if (dtstatus != null && dtstatus.Rows.Count > 0)
                    {

                        ViewBag.Message = "Branch Status Updated Successfully.";

                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }

                DataTable dt = _obj.Select_MasterBranch((HttpContext.Session.GetString("sysbranchuuid")));
                _obj._List = BindData(dt);

            }
            return View(_obj);
        }

        public IActionResult EditBranchStatus(int lineid)
        {
            Cls_Branch _obj = new Cls_Branch();
            DataTable dt = new DataTable();
            dt = _obj.Select_BranchStatus(lineid, (HttpContext.Session.GetString("sysbranchuuid")));
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {

                    _obj.BranchName = dr["BranchName"].ToString();
                    _obj.Status = dr["status"].ToString();
                }

            }
            _obj.StatusList = StatusList();
            return PartialView("EditBranchStatus", _obj);
        }
        public List<SelectListItem> StatusList()
        {
            List<SelectListItem> _lst = new List<SelectListItem>();
            _lst.Add(new SelectListItem { Text = "Active", Value = "Active" });
            _lst.Add(new SelectListItem { Text = "InActive", Value = "InActive" });
            return _lst;
        }


        public IActionResult AddMasterBranch()
        {
            Cls_Branch ep = new Cls_Branch();
            

            return PartialView("AddMasterBranch", ep);
        }
    }
}
8.MasterPurposeController-

using Digital_Management.Models;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;

namespace Digital_Management.Controllers
{
    public class MasterPurposeController : Controller
    {
        private IWebHostEnvironment Environment;
        private IConfiguration Configuration;
        public MasterPurposeController(IWebHostEnvironment _environment, IConfiguration _configuration)
        {
            Environment = _environment;
            Configuration = _configuration;
        }


        public IActionResult MasterVisitingPurpose()
        {
            Cls_Purpose _obj = new Cls_Purpose();
            _obj._List = new List<Cls_Purpose>();
            DataTable ds = _obj.Select_MasterPurpose(HttpContext.Session.GetString("sysbranchuuid")
);
            _obj._List = BindData(ds);

            return View(_obj);
        }

        public List<Cls_Purpose> BindData(DataTable ds)
        {
            List<Cls_Purpose> lst = new List<Cls_Purpose>();
            if (ds != null && ds.Rows.Count > 0)
            {
                foreach (DataRow dr in ds.Rows)
                {

                    lst.Add(new Cls_Purpose()
                    {
                        LineID = Convert.ToInt32(dr["Lineid"].ToString()),
                        // Photo = url,
                        SysVisitingUUid = dr["SysvisitingUUid"].ToString(),
                        purpose_of_visit = dr["purpose_of_visit"].ToString(),

                        PostedBy = dr["Accounttype"].ToString(),

                        Posteddatetime = dr["Posteddatetime"].ToString(),


                    });
                }
            }
            return lst;
        }

        [HttpPost]
        public IActionResult MasterVisitingPurpose(Cls_Purpose _obj, Microsoft.AspNetCore.Http.IFormFile postedFile, IFormCollection form, string save, string Upload, string Update, string Confirm)
        {

            List<Cls_Purpose> _uploadList = new List<Cls_Purpose>();
            if (ModelState.IsValid)
            {
                _obj.PostedBy = HttpContext.Session.GetString("sysbranchuuid");




                if (!string.IsNullOrEmpty(save))
                {

                    _obj.LineID = 0;
                    DataTable dtSave = _obj.Post_MasterPurpose(_obj);
                    if (dtSave != null && dtSave.Rows.Count > 0)
                    {
                        if (dtSave.Rows[0][0].ToString() == "True")
                        {
                            ViewBag.Message = "Master Purpose Created Successfully";
                        }
                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }

                DataTable dt = _obj.Select_MasterPurpose(HttpContext.Session.GetString("sysbranchuuid")
);
                _obj._List = BindData(dt);

            }
            return View(_obj);
        }

        public IActionResult AddMasterVisitingPurpose()
        {
            Cls_Purpose ep = new Cls_Purpose();
            
            return PartialView("AddMasterVisitingPurpose", ep);
        }

        public List<SelectListItem> BindVisiting(DataTable dt6)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt6 != null && dt6.Rows.Count > 0)
            {
                //if (rType == "Trip")
                //{
                //    object[] objrow = new object[] { "0", "Select Vehicle" };
                //    DataRow toInsert = dt.NewRow();
                //    toInsert.ItemArray = objrow;
                //    dt.Rows.InsertAt(toInsert, 0);
                //}
                foreach (DataRow dr in dt6.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }
    }
}

9.MobApiController-

using Digital_Management.Models;
using Digital_Management.Models.App_Code;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Net;

namespace Digital_Management.Controllers
{

    [Route("[controller]")]
    [ApiController]

    public class MobApiController : Controller
    {
        DataEntity db = new DataEntity();


        [HttpGet("/api/GetEmployeeImageBlob/{employeeid}")]
        public FileContentResult GetEmployeeImageBlob(string employeeid)
        {
            var imageData = db.ExecuteDataSetFN("fn_api_select_employeeimagesidwise", employeeid).Tables[0];
            var _imageBase64 = imageData.Rows[0]["Photo"].ToString();
            string converted = _imageBase64.Replace('-', '+');
            converted = converted.Replace('_', '/');
            byte[] imageDataByteArray = null;
            try
            {
                imageDataByteArray = Convert.FromBase64String(converted);
            }
            catch (Exception ex)
            {
                //imageDataByteArray = Convert.FromBase64String("iVBORw0KGgoAAAANSUhEUgAAAV4AAAEUCAMAAABUNq4iAAAC1lBMVEXm5uYAAAD/tgD/lgD/lwD/lgD/lwD/lwD/lgD/lgD/lgD/lwD/mAD/mwD/ vwD / lgD / lwD / lgD / mQD / lwD / lwD / mgD / lwD / lwD / qgD / lwD//wD/lgD/nQD/lgD/lgD/lwD/lwD/lwD/lwD/lgD/lgD/lwD/lgD/lwD/lwD/lgD/lwD/qgD/lgD/lwD/mQD/qgD/lgD/nQD/mAD/lwD/mgD/lwD/ogD/oQD/lwD/lwD/mQD/lwD/lgD/mQD/mAD/lwD/lgD/mAD/lgD/mAD/lgD/lwD/lwD/lwD/lwD/pAD/lgD/lwD/lgD/lgD/lwD/lwD/mAD/lwD/lgD/mQD/lwD/lwD/mQD/mQD/nwD/lgD/lwD/lgD/mgD/lgD/lwD/lwD/lgD/nwD/ngD/lgD/lwD/lgD/lwD/lgD//wD/lgD/lgD/mAD/mQD/qgD/lgD/mwD/mAD/mgD/mQD/lwD/lgD/lwD/mQD/lwD/lwD/mAD/lgD/nAD/lwD/mwD/lwD/mAD/lgD/lgD/lgD/lwD/lwD/mQD/lgD/lwD/lwD/lwD/lwD/lgD/mQD/mAD/lwD/nAD/lgD/lwD/mAD/mwD/lwD/lwD/mAD/lgD/lwD/lgD/lgD/lwD/lwD/mgD/ngD/mAD/mQD/mAD/mQD/lwD/mAD/lgD/lwD/mAD/lwD/lwD/lwD/lgD/lwD/lwD/lwD/lwD/mgD/lgD/lgD/lwD/mAD/lwD/lwD/lgD/lwD/lgD/lwD/mAD/lwD/lgD/lwD/lwD/mAD/mAD/lwD/lwD/lgD/lwD/mAD/lgD/lgD/lgD/lgD/lgD/mAD/nwD/lwD/lwD/lwD/lwD/lwD/lgD/lwD/lwD/lwD/mwD/lwD/lwD/lgD/mAD/lwD/lgD/lgD/lgD/lwD/lgD/mAD/lwD/lwD/lwD/mAD/nAD/lwD/mAD/lgD/lwD/mQD/mAD/lwD/lgD/lgD/lwB92HTLAAAA8nRSTlP/AAdJmMzm/P/23cF+LgRmwjgezpM16bwMsAF8GpfuQnaQ8qqSldH+pvt4CTPJQQa7DXmpMJELE9BHMrXIBWG68y/UTREbYOGsDrKATvH5iUhA7yjY4y0jEFWF6j/ibn+hCB09W/1dcAKGz1dGA4spKitQnbRYN8vVWWQSFhezXvjZJ72OD0Sf64QgIjxSViSZZXQcZ1NPqKJ6vr+aJhU0CiUU1z7l32P3oO3gUZbk0zrFt/VqjNp1Yq9sVMaN3MSDXHM7rWlo3sD0o9tvGDGCNky41qul8CH6p1+Ksbl3WnvDOejHLG0ffZTnzUtKpOyeh1ZAATMAAAkrSURBVHgB7NDFAYIAAABAW7rB3n9NJ6B56d0ItwOAX7Rnc3r16kWvXr3o1asXvXr16tWrF7169aJXr1706tWLXr3o1asXvXr1olevXvTq1atXr1706tWLXr160atXL3r1olevXvTq1YtevXrRq1evXr160atXL3r16kWvXr38U+/heDpfrsFUYRQnqd6JsvwSzFeUeqeo6mCZJtM7qu2CpW53vSOqLlju8dQ7KKuDNV56B+XBKuFb74DDJVjno3fAlz17YO4jiMM4Pr/wGdS2G9u2bdtG3bB2+5LDa3Yuk70/djPK830Jn7t1KAy7f568+sJg2gPy6guHaQ/Jqy8Cpj0ir75IuHv85Omz51EIoGjy6oOrmNg42Ss+Af73RPyLvDGJclhSMnnt88bK/1Kuk9c27+M4OSqVvLZ500SVTl7bvBmiyiSvbd5nosqyzUvebFHl2OYlb1SuHJVnm5e8yC8Qp0JY5yUvilIc3WLyWgnurqeWZGbl5AHktRICqbSsvKKy6nR4yVsdInvV1J4GL3mrz8tBt+uiyOtngek61TeY8ZK3sam5JbXVratqazfhJW9Hp+x1N/xkXTUBk9c7jW6XHNQdfrKumoDJ65leV/m6dd0TMHk90+o6lYdrdEW6eg66RF59Wl31/7p0y8Uo8ipdx7dX6UpvX78YRN6BLtHXC8QMktf/huqO5UN3r+ER8pqm1wXCR8lr3Ni4RhcwnoDJO1Y8ManRBWKmpslrpgu4fGfgajZ1rof7XhNdl28vXyvs6rp8e0Fea80Xw2niguy1sAjyBtXS8vFWVl9EQfXy1evCN/Aojbz67sO0MPLqewvThsir7xZMe0defe9hWMwaefWtx8CsZCGvR89gVj95vdp4DJM2hbyerUYh+KrWyeujhwi61nQhr6+2thFcHz4KeX2X/glBtP35i5DXr75++47AKv3xU4S8/rbw6/efv/5WFr/B14qzEHnJS15GXvKSl5GXvORl5LUfecnLyEte8jLykpe8jLzkJS8jL3kZeclLXkZe8pKXkZe85GX/pqamunbZtQcgOfIFjuP1i+a7mtuKVXHS2bNj27Y9Z3N5iG0s3xpn27ZtG2XX6+7/6+XM7F0482q/hbY+Y0QIb/KOHTt26qi3y97t7qrRZf90G689Ovz2AvsihLc5sF9HvUTggNzigLNUt20HD66ss43XWNVTA6/VPyxvGhxq4D18XjL/PW+z/5X1/8mb3VxOZ5y6KSAnM5V9bY6qdUqumawsNTcvGC8Ta/P6Z/+nfVjeQapZfqtxCttZrfqoqsDs5pHJu6ygoKBwcREUlygnLQZKyzrKrX+7VUD5hLYyXdwiCSom3mZv4F5Z29vvAN+dg4PwzvTX4L3r7lLodk+2pJEFBUPhXnsf94XmXXb/IrAeeDAgu2x73YdkN8Ie2SItc6ZbneaD4itlSn14KDR75NEI5M0DHsPt8Sdwm+Q46MokTBXJsgtcYOG06kkgVdK5N2E6kFeHl0eq8Qae8uF270lSPl5LQvLOHo4pc5SkBOBB2T0N9JM54QzcnpHTs81wGx6hvLVr2l7KngxMHwPwnOyex8vwnn8HwGSArrV4M2HD2ireF6js9H/Ce8qLeL0Ugtfr5d2S1i7AK0J5X5l6cW+AV187t8uLwHZpB1jbpNefA5ZL+Z3AuvSK5H7DMbwXAD1S228fD0mX1+R9wwdTKnlzOkHMnlFz3rSgYJB/xYrr4aYVK1Y0D8W7ETjzreTOBcDqELwDL97+9quYR8njwC3Xzn3rnUjlfVd2TYG3JV0JzJPm3F9e5j7jAVPNNXeQXWq5y3tWBrwnu+R74X3VpGoCGZs83vnAo5IZSZc0EJrWeb7eYOoltZ0MfS+RlP8BvBic1/pQUjrQUlr7ERT4Jfn7RijvRtntghjnqhqVwkmyO2WtPTFiJrBGGg/Tz5dTb5c3F9h7vtNVMLwWb8ok+NjwulvGtpddcgZcGoLXa5bUH/hETp8CbYPyJspuOfCZ9BZwn5yeiUxec7csgUly6oThVfPFn8fg9IX0ADwpt/td3pVUKyNQk1dfgPWW4XW2bCe3mZBWP++XwLlyugY4NSjvDjlNgjQzu1BOj0YT7+Vn4rTI8H4EH1fn/Yrq1X4ebVQMXyca3o+gidwyYXgo3keed1std8+vy2kh8GgY3g8gzayfLae9UcR77mQg5rOSPoZ3EWRW5x0M3DLW6/VavLoIKDW8i+A9ud0JZ4biHSSvh4ArKrmerZd3J/BN1N17D8HLg/OkZYa3DXzrl1OZy3sX8Kjc/MGo7sbtLHfLO+XUaCj0lPQdzAzDuwXYK6evgBx9D3wlu8XBeTtXPlf/EEW80+Eq2X1oeHuCeUY+f5bL28eC3gbhlrVBqK61DK/ZcoXsdgKvSfoMrD6heVOAW2TnHwOdpHygTHZXB+ddDnwnp8wo4i2HOwdJKQMM72wfxNy4TD++g8urq4BdATWfAHcuD0L1vsc7OwmKVrT3PzoUOuVLagk0nbIkFK/OAXqOU2oa8KakbpDx0+xtYwnOq3uArLlaeztRxOswxjzWNwPDq58BPmoNGN6UD4B7nwCwJgahal6K4VVXgA9iAJ733kmDFZJ398uA9S1AxSmS9mMKxXuqBVi/WEQTb0IGpm8N78hETBWGV293wuR7RMGoNnq8a88EU1lATpnheXXRUEy/bJFd9ke4xYbg1U9GlmZRxKsVvwJMX9zT8CrQIQa495P7MbxafqYF8NizCsrb9hcMr9ov7uZi7ZXpkh/ixvjC8GrzSxbg695Hbm85sFx1bShe/dYasNJaRRBv/bW/+e3RhY6Plz/h6W8GqQcknSEj+Ozgfdv1Dwpkb9v3o/5Faws/uTZPXv7vb/g9R+HaPK/xyOj+pbjPVQboHShQlBX5vL/9wq+nSHrWB+818B7t9gOd3vvpj48gKbeB92j3egVeT6mB96iXOgS3P3cGGniPRQnxfz33d3pyw3/M/tsOHRMBAAAgEOrf2g6OfxAB9OrVi1696NWrF7169aJXr1706tWrV69e9OrVi169etGrVy969aJXr1706tWLXr160av3oRe9evWiV69e9OpFr1696NWrF7169aJXL3r16kWvXr3o1asXvXr1AkDIAJeoFje3HAjXAAAAAElFTkSuQmCC");
            }

            var imageDataStream = new MemoryStream(imageDataByteArray);
            imageDataStream.Position = 0;
            return File(imageDataByteArray, "image/png");
        }

    }
}

10.VisitorCardController-

using Digital_Management.Models;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;


namespace Digital_Management.Controllers
{
    public class VisitorCardController : Controller
    {

        private IWebHostEnvironment Environment;
        private IConfiguration Configuration;
        public VisitorCardController(IWebHostEnvironment _environment, IConfiguration _configuration)
        {
            Environment = _environment;
            Configuration = _configuration;
        }


        public IActionResult VisitorCardMaster()
        {
            Cls_VisitorCard _obj = new Cls_VisitorCard();
            _obj._List = new List<Cls_VisitorCard>();
            DataTable dt = _obj.Select_VisitorCardNo((HttpContext.Session.GetString("sysbranchuuid")));
            _obj._List = BindData(dt);
            return View(_obj);
            
        }
        public List<Cls_VisitorCard> BindData(DataTable dt)
        {
            List<Cls_VisitorCard> lst = new List<Cls_VisitorCard>();
            if (dt != null && dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {

                    lst.Add(new Cls_VisitorCard()
                    {
                        VisitorCardNo = dr["VisitorCardNo"].ToString(),
                        PostedBy = dr["Accounttype"].ToString(),
                        PostedDateTime = dr["PostedDateTime"].ToString(),
                    });
                }
            }
            return lst;
        }
        [HttpPost]
        public IActionResult VisitorCardMaster(Cls_VisitorCard _obj, Microsoft.AspNetCore.Http.IFormFile postedFile, IFormCollection form, string save, string Upload, string Update, string Confirm)
        {

            List<Cls_VisitorCard> _uploadList = new List<Cls_VisitorCard>();
            if (ModelState.IsValid)
            {
               _obj.PostedBy = HttpContext.Session.GetString("sysbranchuuid");

                if (!string.IsNullOrEmpty(save))
                {
                    
                   // _obj.SysVisitorCardId = '0';
                    DataTable dtSave = _obj.Post_VisitorCardNo(_obj);
                    if (dtSave != null && dtSave.Rows.Count > 0)
                    {
                        if (dtSave.Rows[0][0].ToString() == "True")
                        {
                            ViewBag.Message = "Visitor Card Added Successfully";
                        }
                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }             

                DataTable dt = _obj.Select_VisitorCardNo((HttpContext.Session.GetString("sysbranchuuid")));
                _obj._List = BindData(dt);

            }
            return View(_obj);
        }
        public IActionResult AddVisitorCardMaster()
        {
            Cls_VisitorCard ep = new Cls_VisitorCard();
           
            return PartialView("AddVisitorCardMaster", ep);
        }
    }
}
11.VisitorController-

using Dapper;
using Digital_Management.Models;
using Microsoft.AspNet.SignalR.Infrastructure;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Configuration;
using Microsoft.VisualBasic;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;

namespace Digital_Management.Controllers
{
    public class VisitorController : Controller
    {

        private IWebHostEnvironment Environment;
        private IConfiguration Configuration;
        public VisitorController(IWebHostEnvironment _environment, IConfiguration _configuration)
        {
            Environment = _environment;
            Configuration = _configuration;
        }

        public IActionResult VisitorMaster()
        {
            Cls_Visitor _obj = new Cls_Visitor();
            _obj._List = new List<Cls_Visitor>();
            DataSet ds = _obj.Select_Visitor(HttpContext.Session.GetString("sysbranchuuid"));
            _obj._List = BindData( _obj,ds);

            return View(_obj);
        }


        public List<Cls_Visitor> BindData(Cls_Visitor _obj, DataSet ds)
        {
            List<Cls_Visitor> lst = new List<Cls_Visitor>();
            if (ds != null && ds.Tables.Count > 0)
            {
                if (ds.Tables[0] != null && ds.Tables[0].Rows.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        var url = HttpContext.Request.Scheme + "://" + HttpContext.Request.Host + "/api/GetEmployeeImageBlob/" + dr["visitor_id"].ToString();

                        lst.Add(new Cls_Visitor()
                        {
                            Visitor_id = (dr["Visitor_id"].ToString()),
                            Photo = url,
/*                            EmployeeName = dr["Firstname"].ToString(),
*/                            Entry_time = dr["Entry_time"].ToString(),
                            Firstname = dr["FirstName"].ToString().ToUpper(),
                            Lastname = dr["Lastname"].ToString().ToUpper(),
                            Emailid = dr["Emailid"].ToString().ToUpper(),
                            Total_hrs = string.IsNullOrEmpty(dr["totalhrs"].ToString()) ? "N/A" : dr["totalhrs"].ToString(),
                            Status = dr["Status"].ToString(),
                            Phone = dr["Phone"].ToString(),
                            Id_proof = dr["Id_proof"].ToString(),
                            VisitorCardNo = dr["Visitor_CardNo"].ToString(),
                            PurposeOfVisit = dr["PurposeOfVisiting"].ToString(),
                            Department = dr["Department"].ToString(),
                            whom_to_meet = dr["whomtomeet"].ToString(),
                            Company_name = dr["Company_name"].ToString(),
                            Address = dr["Address"].ToString(),
                            Exit_time = string.IsNullOrEmpty(dr["Exit_time"].ToString()) ? "N/A" : dr["Exit_time"].ToString(),
                            Postedby = dr["Postedby"].ToString(),
                            Posteddatetime = dr["Posteddatetime"].ToString(),

                        });


                    }
                    //if (ds.Tables[1] != null && ds.Tables[1].Rows.Count > 0)
                    //{
                    //    _obj.TotalCount = string.IsNullOrEmpty(ds.Tables[1].Rows[0]["totalvisitor"].ToString()) ? "0" : ds.Tables[1].Rows[0]["totalvisitor"].ToString();
                    //    _obj.PresentCount = ds.Tables[1].Rows[0]["in"].ToString();
                    //    _obj.OutCount = ds.Tables[1].Rows[0]["out"].ToString();
                    //}
                }
            }
            
            return lst;
        }


        [HttpPost]
        public IActionResult VisitorMaster(Cls_Visitor _obj, Microsoft.AspNetCore.Http.IFormFile postedFile, IFormCollection form, string save, string Upload, string Update, string Confirm)
        {

            List<Cls_Visitor> _uploadList = new List<Cls_Visitor>();
            if (ModelState.IsValid)
            {
                _obj.Postedby = HttpContext.Session.GetString("sysbranchuuid");
                _obj.Branch = HttpContext.Session.GetString("branchname");
               
                if (!string.IsNullOrEmpty(save))
                {
                    string photo = form["Photo"];

                    if (!string.IsNullOrEmpty(photo) && photo.Contains(","))
                    {
                        // Remove the "data:image/png;base64," prefix and convert the base64 string to a byte array
                        byte[] imageBytes = Convert.FromBase64String(photo.Split(',')[1]);

                        // Convert the byte array to a base64 string and set it as the value of the Photo property
                        _obj.Photo = Convert.ToBase64String(imageBytes);
                    }


                    else
                    {
                        _obj.Photo = "";
                    }


                    _obj.LineId = 0;
                    DataTable dtSave = _obj.Insert_VisitorList(_obj);
                    if (dtSave != null && dtSave.Rows.Count > 0)
                    {
                        if (dtSave.Rows[0][0].ToString() == "True")
                        {
                            ViewBag.Message = "Master Employee Created Successfully";
                        }
                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }
                if (!string.IsNullOrEmpty(Update))
                {
                    DataTable dtUpdate = _obj.Update_VisitorList(_obj);
                    if (dtUpdate != null && dtUpdate.Rows.Count > 0)
                    {

                        ViewBag.Message = "Employee Updated Successfully";

                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }

                if (!string.IsNullOrEmpty(Confirm))
                {
                    DataTable dtUpdate = _obj.Update_VisitorExitTime(_obj);
                    if (dtUpdate != null && dtUpdate.Rows.Count > 0)
                    {

                        ViewBag.Message = "Visitor Exit Time Updated ";

                        //ViewBag.Message = dtSave.Rows[0][0].ToString();
                        ModelState.Clear();
                    }
                    else
                    {
                        ViewBag.Message = "An error occurred.";
                        ModelState.Clear();
                    }
                }


                DataSet dt = _obj.Select_Visitor((HttpContext.Session.GetString("sysbranchuuid")));
                _obj._List = BindData( _obj,dt);

            }
            return View(_obj);
        }

        public IActionResult AddVisitorMaster()
        {
            Cls_Visitor ep = new Cls_Visitor();
            DataTable dt = ep.Select_DepartmentDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            DataTable dt2 = ep.Select_EmployeeDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            DataTable dt3 = ep.Select_IdproofDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            DataTable dt4 = ep.Select_VCardDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            DataTable dt5 = ep.Select_AccessoriesDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            DataTable dt6 = ep.Select_VisitingDropDown((HttpContext.Session.GetString("sysbranchuuid")));

            ep.DepartmentDDL = BindDepartment(dt);
            ep.EmployeeDDL = BindEmployee(dt2);
            ep.Id_proofDDL = BindIdProof(dt3);
            ep.VCardDDL = BindVCard(dt4);
            ep.AccessoriesDDL = BindAccessories(dt5);
            ep.VisitingPurposeDDL = BindVisiting(dt6);

            return PartialView("AddVisitorMaster", ep);
        }

        public List<SelectListItem> BindDepartment(DataTable dt)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt != null && dt.Rows.Count > 0)
            {
                
                foreach (DataRow dr in dt.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }

        public List<SelectListItem> BindEmployee(DataTable dt2)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt2 != null && dt2.Rows.Count > 0)
            {
                
                foreach (DataRow dr in dt2.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }
        public List<SelectListItem> BindIdProof(DataTable dt3)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt3 != null && dt3.Rows.Count > 0)
            {
               
                foreach (DataRow dr in dt3.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }
        public List<SelectListItem> BindVCard(DataTable dt4)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt4 != null && dt4.Rows.Count > 0)
            {
                
                foreach (DataRow dr in dt4.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }
        public List<SelectListItem> BindAccessories(DataTable dt5)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt5 != null && dt5.Rows.Count > 0)
            {
                
                foreach (DataRow dr in dt5.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }
        public List<SelectListItem> BindVisiting(DataTable dt6)
        {
            List<SelectListItem> NameList = new List<SelectListItem>();
            if (dt6 != null && dt6.Rows.Count > 0)
            {
                
                foreach (DataRow dr in dt6.Rows)
                {
                    NameList.Add(new SelectListItem
                    {
                        Text = dr["Value"].ToString(),
                        Value = dr["Value"].ToString(),
                        Selected = true

                    });
                }
            }
            return NameList;
        }


        

       

        public ActionResult UpdateVisitorTime(string Visitor_id)
        {
            Cls_Visitor _obj = new Cls_Visitor();
            DataTable dts = new DataTable();
            dts = _obj.Select_VisitorDetails(Visitor_id);
            if (dts != null && dts.Rows.Count > 0)
            {

                foreach (DataRow dr in dts.Rows)
                {
                    var Url = HttpContext.Request.Scheme + "://" + HttpContext.Request.Host + "/api/GetEmployeeImageBlob/" + dr["Visitor_id"].ToString();
                   
                    _obj.Visitor_id = (dr["Visitor_id"].ToString());
                    _obj.Firstname = dr["firstname"].ToString();
                    _obj.Lastname = dr["lastname"].ToString();
                    _obj.Photo = Url;
                }
            }
            DataTable dtd = _obj.Select_VCardDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            _obj.VCardDDL = BindEmployee(dtd);

            // _obj.VehicleTypeList = BindVehicleType();
            return PartialView("UpdateVisitorTime", _obj);
        }

        public IActionResult UpdateVisitorMaster(string Visitor_id)
        {
            Cls_Visitor ep = new Cls_Visitor();
            DataTable dts = new DataTable();
            dts = ep.Select_VisitorDetails(Visitor_id);


            if (dts != null && dts.Rows.Count > 0)
            {

                foreach (DataRow dr in dts.Rows)
                {
                    var url = HttpContext.Request.Scheme + "://" + HttpContext.Request.Host + "/api/GetEmployeeImageBlob/" + dr["visitor_id"].ToString();


                    ep.Visitor_id = (dr["Visitor_id"].ToString());
                    ep.Photo = url;
                    ep.Entry_time = dr["Entry_time"].ToString();
                    ep.Firstname = dr["FirstName"].ToString().ToUpper();
                    ep.Lastname = dr["Lastname"].ToString().ToUpper();
                    ep.Emailid = dr["Emailid"].ToString().ToUpper();
                    ep.Accessories = dr["Accessories"].ToString();
                    ep.Phone = dr["Phone"].ToString();
                    ep.Id_proof = dr["Id_proof"].ToString();
                    
                    ep.VisitorCardNo = dr["Visitor_CardNo"].ToString();
                    ep.PurposeOfVisit = dr["PurposeOfVisiting"].ToString();
                    ep.Department = dr["Department"].ToString();
                    ep.whom_to_meet = dr["whomtomeet"].ToString();
                    ep.Company_name = dr["Company_name"].ToString();
                    ep.Address = dr["Address"].ToString();
                    ep.Branch = dr["Branch"].ToString();
                    ep.Exit_time = dr["Exit_time"].ToString();
                    ep.Postedby = dr["Postedby"].ToString();
                    ep.Posteddatetime = dr["Posteddatetime"].ToString();
                }
            }


            DataTable dt = ep.Select_DepartmentDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            ep.DepartmentDDL = BindDepartment(dt);

            DataTable dt2 = ep.Select_EmployeeDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            ep.EmployeeDDL = BindEmployee(dt2);

            DataTable dt3 = ep.Select_IdproofDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            ep.Id_proofDDL = BindIdProof(dt3);

            DataTable dt4 = ep.Select_VCardDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            ep.VCardDDL = BindVCard(dt4);

            DataTable dt5 = ep.Select_AccessoriesDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            ep.AccessoriesDDL = BindAccessories(dt5);

            DataTable dt6 = ep.Select_VisitingDropDown((HttpContext.Session.GetString("sysbranchuuid")));
            ep.VisitingPurposeDDL = BindVisiting(dt6);

            return PartialView("UpdateVisitorMaster", ep);
        }


        //------ Exisiting Visitor -----------

        

    }

}
    

Model Code-

1.Cls_Branch-

using Digital_Management.Models.App_Code;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Collections.Generic;
using System.Data;

namespace Digital_Management.Models
{
    public class Cls_Branch : DataEntity
    {

        public List<Cls_Branch> _List { get; set; }


        public int LineID { get; set; }
        public string SysBranchUUid { get; set; }
        public string BranchName { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string Phone { get; set; }
        public string Locaation { get; set; }
        public string PostedBy { get; set; }
        public string Status { get; set; }
        public string Posteddatetime { get; set; }
        public string Accounttype { get; set; }
        public string selStatusId { get; set; }

        public List<SelectListItem> StatusList { get; set; }



        public DataTable Select_MasterBranch(string sessionid)
        {
            return ExecuteDataSetFN("fn_get_masterbranch", sessionid).Tables[0];
        }

        public DataTable Post_MasterBranch(Cls_Branch _obj)
        {
            return ExecuteDataTableFN("fn_post_masterbranch", _obj.BranchName, _obj.Email, _obj.Phone, _obj.Locaation, _obj.PostedBy);
        }

        public DataTable Select_BranchStatus(int lineid, string sessionid)
        {
            return ExecuteDataSetFN("fn_select_branchstatusbyid", lineid, sessionid).Tables[0];
        }

        public DataTable Update_BranchStatus(Cls_Branch _obj)
        {
            return ExecuteDataTableFN("fn_update_branchstatus", _obj.LineID, _obj.Status, _obj.PostedBy);
        }

    }
}
2.Cls_Dashborad-

using Digital_Management.Models.App_Code;
using System.Collections.Generic;
using System.Data;

namespace Digital_Management.Models
{
    public class Cls_Dashboard:DataEntity
    {

        public List<Cls_Dashboard> _VisitorList { get; set; }

        public string SysVisitorUUId { get; set; }
        public string Photo { get; set; }
        public string first_name { get; set; }

        public string FullName { get; set; }
        public string Address { get; set; }

        public string Entry_time { get; set; }
        public string PurposeOfVisit { get; set; }
        public string Branch { get; set; }


        //public string Firstname { get; set; }
        //public string Lastname { get; set; }
        public string VisitorCardNo { get; set; }
        //public string Emailid { get; set; }
        //public string Phone { get; set; }
        //public string Id_proof { get; set; }
        public string Department { get; set; }
        public string whom_to_meet { get; set; }
        public string Company_name { get; set; }
        public string Exit_time { get; set; }
        public string Status { get; set; }
        //public string Posteddatetime { get; set; }
        //public string Accessories { get; set; }


       
        public DataTable Select_VisitorList(string sessionid)
        {
            return ExecuteDataSetFN("fn_get_visitordetails", sessionid).Tables[0];
        }


    }
}
3.Cls_Department-
using Digital_Management.Models.App_Code;
using System.Collections.Generic;
using System.Data;

namespace Digital_Management.Models
{
    public class Cls_Department:DataEntity
    {

        public List<Cls_Department> _List { get; set; }

        public int LineId { get; set; }
        public string SysDepartmentuuidId { get; set; }
        public string Department { get; set; }
        public string PostedBy { get; set; }
        public string PostedDateTime { get; set; }

        public DataTable Select_Department(string session_id)
        {
            return ExecuteDataSetFN("fn_GetMasterDepeartment", session_id).Tables[0];
        }


        public DataTable Insert_VisitorList(Cls_Department _obj)
        {
            return ExecuteDataTableFN("fn_postMasterdepartment", _obj.Department, _obj.PostedBy);
        }
    }
}
4.Cls_Employee-

using Digital_Management.Models.App_Code;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Collections.Generic;
using System.Data;

namespace Digital_Management.Models
{
    public class Cls_Employee:DataEntity
    {

        public List<Cls_Employee> _List { get; set; }
        public List<SelectListItem> DepartmentDDL { get; set; }

        public int LineId { get; set; }
        public string EmployeeId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string EmailId { get; set; }
        public string Phone { get; set; }
        public string Department { get; set; }
        public string Location { get; set; }
        public string Postedby { get; set; }
        public string Status { get; set; }
        public string PostedDateTime { get; set; }
        public string EmployeeName { get; set; }
        public string selStatusId { get; set; }

        public string selDepartmentId { get; set; }

        public List<SelectListItem> StatusList { get; set; }



        public DataTable Get_EmployeeData(string SessionId)
        {
            return ExecuteDataSetFN("Fn_GetEmplyeeData", SessionId).Tables[0];
        }

        public DataTable Post_MasterEmployee(Cls_Employee _obj)
        {
            return ExecuteDataTableFN("Fn_PostMasterEmployee", _obj.EmployeeId, _obj.FirstName, _obj.LastName, _obj.EmailId, _obj.Phone, _obj.selDepartmentId, _obj.Location, _obj.Postedby);
        }

        public DataTable Select_DepartmentDropDown(string sessionid)
        {
            return ExecuteDataSetFN("Fn_getmasterDeptDrop", sessionid).Tables[0];
        }

        public DataTable Select_EmployeeStatus(int lineid,string sessionid)
        {
            return ExecuteDataSetFN("fn_select_employeestatusbyid", lineid, sessionid).Tables[0];
        }

        public DataTable Update_EmployeeStatus(Cls_Employee _obj)
        {
            return ExecuteDataTableFN("fn_update_employeestatus", _obj.LineId, _obj.Status, _obj.Postedby);
        }

    }
}
5.Cls_IdProof-

using Digital_Management.Models.App_Code;
using System.Collections.Generic;
using System.Data;

namespace Digital_Management.Models
{
    public class Cls_IdProof:DataEntity
    {
        public List<Cls_IdProof> _List { get; set; }


        public int LineId { get; set; }
        public string sysIdproofUUid { get; set; }
        public string Idproof { get; set; }
        public string PostedBy { get; set; }
        public string Posteddatetime { get; set; }


        public DataTable Select_IdProof(string session_id)
        {
            return ExecuteDataSetFN("fn_getidproof", session_id).Tables[0];
        }


        public DataTable Insert_IdProof(Cls_IdProof _obj)
        {
            return ExecuteDataTableFN("Fn_PostMasterIdProof", _obj.Idproof, _obj.PostedBy);
        }
    }
}
6.Cls_Login-
using Digital_Management.Models.App_Code;
using System.Data;

namespace Digital_Management.Models
{
    public class Cls_Login : DataEntity
    {
        public string UserName { get; set; }
        public string Password { get; set; }
        public string Message { get; set; }

        public DataTable ValidateUserAccount(string userid, string password)
        {
            return ExecuteDataSetFN("fn_validate_masteradmin", userid, password).Tables[0];
        }
    }
}

7.Cls_Purpose-
using Digital_Management.Models.App_Code;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Collections.Generic;
using System.Data;

namespace Digital_Management.Models
{
    public class Cls_Purpose: DataEntity
    {
        public List<Cls_Purpose> _List { get; set; }


        public int LineID { get; set; }
        public string SysVisitingUUid { get; set; }
        public string purpose_of_visit { get; set; }

        public string PostedBy { get; set; }

        public string Posteddatetime { get; set; }
        public List<SelectListItem> VisitingPurposeDDL { get; set; }




        public DataTable Select_MasterPurpose(string session_id)
        {
            return ExecuteDataSetFN("fn_get_masterPurpose", session_id).Tables[0];
        }

        public DataTable Post_MasterPurpose(Cls_Purpose _obj)
        {
            return ExecuteDataTableFN("fn_post_masterpurpose", _obj.purpose_of_visit, _obj.PostedBy);
        }

        public DataTable Select_VisitingDropDown(string sessionid)
        {
            return ExecuteDataSetFN("Fn_getmasterVisitingPurposeDrop", sessionid).Tables[0];
        }

    }
}
8.Cls_Visitor-

using Digital_Management.Models.App_Code;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Collections.Generic;
using System.Data;

namespace Digital_Management.Models
{
    public class Cls_Purpose: DataEntity
    {
        public List<Cls_Purpose> _List { get; set; }


        public int LineID { get; set; }
        public string SysVisitingUUid { get; set; }
        public string purpose_of_visit { get; set; }

        public string PostedBy { get; set; }

        public string Posteddatetime { get; set; }
        public List<SelectListItem> VisitingPurposeDDL { get; set; }




        public DataTable Select_MasterPurpose(string session_id)
        {
            return ExecuteDataSetFN("fn_get_masterPurpose", session_id).Tables[0];
        }

        public DataTable Post_MasterPurpose(Cls_Purpose _obj)
        {
            return ExecuteDataTableFN("fn_post_masterpurpose", _obj.purpose_of_visit, _obj.PostedBy);
        }

        public DataTable Select_VisitingDropDown(string sessionid)
        {
            return ExecuteDataSetFN("Fn_getmasterVisitingPurposeDrop", sessionid).Tables[0];
        }

    }
}

9.Cls_Visitor_Card-
using Digital_Management.Models.App_Code;
using System.Collections.Generic;
using System.Data;

namespace Digital_Management.Models
{
    public class Cls_VisitorCard:DataEntity
    {
        public List<Cls_VisitorCard> _List { get; set; }

        public string SysVisitorCardId { get; set; }
        public string VisitorCardNo { get; set; }
        public string PostedBy { get; set; }
        public string PostedDateTime { get; set; }

        public DataTable Select_VisitorCardNo( string session_id)
        {
            return ExecuteDataSetFN("fn_getvisitorcardno", session_id).Tables[0];
        }

        public DataTable Post_VisitorCardNo(Cls_VisitorCard _obj)
        {
            return ExecuteDataTableFN("fn_postvisitor_card", _obj.VisitorCardNo, _obj.PostedBy);

        }
    }
}
View code--
VisitorDashboard-

@model Digital_Management.Models.Cls_Dashboard

@{
    ViewData["Title"] = "Dashboard";
}

<style>
    .marginBottom {
        margin-bottom: 4px !important;
    }

    .spnCustom {
        color: #827777;
        font-size: 12px;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />

<style>
    .badge {
        background-color: white;
        font-weight: 500;
        border-radius: 15px;
    }

    .present {
        border: 2px solid #52BE80;
        /*border-radius: 30%;*/
    }

    .absent {
        border: 2px solid #EC7063;
        /*border-radius: 30%;*/
    }

    .Total {
        border: 2px solid #adadad;
        /*border-radius: 30%;*/
    }

    .spnCustom {
        color: #827777;
        font-size: 12px;
    }
    /*.spnCustom4 {
                color: #827777;
                font-size: 12px;
            }*/

    #gapping {
        color: #000000;
        font-size: 13px;
        font-weight: 500;
    }

    #gap {
        margin-left: 12px;
        font-size: 12px;
    }
    /* .badge-mine {
                background-color: #800080;
            }
            .badge-open{
                background-color: #FF8C00;
            }
            .badge-reopen{
                background-color: #ffc107;
            }
            .badge-default{
                background-color: #7d7c7c;
            }*/
    .dropdown-menu, .ui-datepicker {
        z-index: 9999 !important;
    }

</style>

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Home <span class="spnCustom">Visitors</span></h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Visitors</a></li>
                    <li class="breadcrumb-item active">Home</li>
                </ol>
            </div>
        </div>
    </div>
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{

    <div class="row">
        @if (@ViewBag.Message != null)
        {

            <div class="col-md-12" style="margin-top:2.3%" id="divMsg">
                <div class="form-group">
                    <div class="alert alert-info" role="alert">
                        @ViewBag.Message
                    </div>
                </div>

            </div>

        }
        <form>
            <div class="col-12">
                <div class="card">
                    <div class="card card-default">
                        <div class="card-body" style="padding:0.5rem">
                            <div class="col-sm-10" style="padding-bottom:5px">

                                   @* <a href="#" title="Total Employees" id="btn_total" style="margin: 5px 5px 5px 5px;"><span class="badge Total" style="color:#827777">Total (@Html.Raw(Model.TotalCount))</span></a>
                                    <a href="#" title="Present" id="btn_running" style="margin: 5px 5px 5px 5px;"><span class="badge present" style="color:#827777;">Present (@Html.Raw(Model.PresentCount))</span></a>
                                    <a href="#" title="Exit" id="btn_idle" style="margin: 5px 5px 5px 5px;"><span class="badge absent" style="color:#827777">Absent (@Html.Raw(Model.AbsentCount))</span></a>*@
                                   
                            </div>
                        </div>
                    </div>
                    <div class="row" style="margin-top:-1%">
                        <div class="card-body">
                            <div class="table-responsive">
                                <table id="example9" class="table table-bordered table-striped">
                                    <thead class="mytableheader" style="display:none">
                                        <tr>
                                            <th></th>
                                            <th></th>
                                            <th></th>
                                            <th></th>
@*                                            <th></th>
*@
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (Model._VisitorList != null && Model._VisitorList.Count > 0)
                                        {
                                            foreach (var item in Model._VisitorList.ToList())
                                            {
                                                <tr style="line-height: 1.20;">
                                                    <td width="26%">

                                                        <div class="row">

                                                            <div class="col-md-12" style="padding-bottom: 10px;">

                                                                <div class="row">
                                                                    <div class="col-md-3">
                                                                        <span><img src="@Html.DisplayFor(modelitem => item.Photo)" alt="" height="50" width="50" style="border-radius: 50%; border:2px solid #424949 ;" /></span>
                                                                    </div>
                                                                    <div class="col-md-9">
                                                                        <span class="spnCustom" hidden="hidden">Hidden</span>
                                                                        <b style="margin-left:-2%; text-align: center">@Html.DisplayFor(modelitem => item.first_name)</b><br />
@*                                                                        <span class="spnCustom" style="margin-left:-2%">@Html.DisplayFor(modelitem => item.FenceName)</span>
*@                                                                    </div>

                                                                    @*<span><img src="@Html.DisplayFor(modelitem => item.ProfileImage)" alt="" height="50" width="50" style="border-radius: 50%; border:1px solid #dee2e6;" />
                                                        <b>@Html.DisplayFor(modelitem => item.FullName)</b> <b class="spnCustom">@Html.DisplayFor(modelitem => item.FenceName)</b>  </span>*@
                                                                </div>


                                                                @* <span><img src="@Html.DisplayFor(modelitem => item.ProfileImage)" alt="" height="50" width="50" style="border-radius: 50%; border:1px solid #dee2e6;" />
                                                    <b style="margin-left:2%">@Html.DisplayFor(modelitem => item.FullName)</b></span><span class="spnCustom">@Html.DisplayFor(modelitem => item.FenceName)</span>*@
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-bottom: 10px;">
                                                                <span class="spnCustom"> <i class="fa fa-map-pin" style="color:red"></i> Visitor's Address</span><br />
                                                                <span id="gapping"> @Html.DisplayFor(modelitem => item.Address)</span>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-bottom: 10px;">
                                                                <span class="spnCustom"><i class="fa fa-building" style="color:#D68910"></i> Company Name</span><br />
                                                                <span id="gapping"> @Html.DisplayFor(modelitem => item.Company_name)</span>
                                                            </div>
                                                        </div>

                                                    </td>
                                                    <td>
                                                        <div class="row">

                                                            <div class="col-md-12" style="padding-bottom: 8px;">
                                                                <span class="spnCustom"><i class="fa fa-user" style="color:#5DADE2"></i> Employee </span><br />
                                                                <span id="gapping"> @Html.DisplayFor(modelitem => item.whom_to_meet) </span>
                                                            </div>

                                                            <div class="col-md-12" style="padding-bottom: 8px;">
                                                                <span class="spnCustom"><i class="fa fa-user" style="color:#5DADE2"></i> Department</span><br />
                                                                <span id="gapping">@Html.DisplayFor(modelitem => item.Department)</span>
                                                            </div>

                                                            <div class="col-md-12" style="padding-bottom: 8px;">
                                                                <span class="spnCustom"><i class="fa fa-bullseye" style="color:#5DADE2"></i> Agenda </span><br />
                                                                <span id="gapping">@Html.DisplayFor(modelitem => item.PurposeOfVisit)</span>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    @*<td>
                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-bottom: 8px;">
                                                                @if (Convert.ToInt32(item.Battery) <= 5)
                                                                {
                                                                    <span class="spnCustom"><i class="fa fa-battery-empty" style="color:#EC7063"></i> Battery %</span>

                                                                    <br />
                                                                    <span id="gapping">@Html.DisplayFor(modelitem => item.Battery)</span>
                                                                }
                                                                else if (Convert.ToInt32(item.Battery) > 5 && Convert.ToInt32(item.Battery) <= 25)
                                                                {
                                                                    <span class="spnCustom"><i class="fa fa-battery-quarter" style="color:#EC7063"></i> Battery %</span>

                                                                    <br />
                                                                    <span id="gapping">@Html.DisplayFor(modelitem => item.Battery)</span>
                                                                }
                                                                else if (Convert.ToInt32(item.Battery) > 25 && Convert.ToInt32(item.Battery) <= 50)
                                                                {
                                                                    <span class="spnCustom"><i class="fa fa-battery-half" style="color:#F5B041"></i> Battery %</span>

                                                                    <br />
                                                                    <span id="gapping">@Html.DisplayFor(modelitem => item.Battery)</span>
                                                                }
                                                                else if (Convert.ToInt32(item.Battery) > 50 && Convert.ToInt32(item.Battery) <= 75)
                                                                {
                                                                    <span class="spnCustom"><i class="fa fa-battery-three-quarters" style="color:#82E0AA"></i> Battery %</span>

                                                                    <br />
                                                                    <span id="gapping">@Html.DisplayFor(modelitem => item.Battery)</span>
                                                                }
                                                                else
                                                                {
                                                                    <span class="spnCustom"><i class="fa fa-battery-full" style="color:#52BE80"></i> Battery %</span>

                                                                    <br />
                                                                    <span id="gapping">@Html.DisplayFor(modelitem => item.Battery)</span>
                                                                }

                                                            </div>
                                                            <div class="col-md-12" style="padding-bottom: 8px;">
                                                                <span class="spnCustom"><i class="fa fa-plug" style="color:#BB8FCE"></i> Battery State</span><br />
                                                                <span id="gapping">@Html.DisplayFor(modelitem => item.BatteryState)</span>
                                                            </div>
                                                            @if (item.IsLowPowerMode == "true")
                                                            {
                                                                <div class="col-md-12" style="padding-bottom: 8px;">
                                                                    <span class="spnCustom"><i class="fa fa-bolt" style="color:#58D68D"></i> Power Mode</span><br />
                                                                    <span id="gapping"> on</span>
                                                                </div>

                                                            }
                                                            else
                                                            {
                                                                <div class="col-md-12" style="padding-bottom: 8px;">
                                                                    <span class="spnCustom"><i class="fa fa-bolt" style="color:#EC7063"></i> Power Mode</span><br />
                                                                    <span id="gapping"> off</span>
                                                                </div>
                                                            }

                                                        </div>
                                                    </td>*@
                                                    <td>
                                                        <div class="row">

                                                            <div class="col-md-12" style="padding-bottom: 8px;">
                                                                <span class="spnCustom">@*<img src="~/Images/icons8-login-16.png" style="color: #827777;">*@    <i class="fa fa-sign-in" style="color:#52BE80"></i> Entry Time</span>
                                                                <span id="gapping"> @Html.DisplayFor(modelitem => item.Branch)</span><br />
                                                                <span id="gapping"> @Html.DisplayFor(modelitem => item.Entry_time)</span>
                                                            </div>

                                                            <div class="col-md-12" style="padding-bottom: 8px;">
                                                                <span class="spnCustom">@*<img src="~/Images/icons8-logout-rounded-16.png" style="color: #827777;">*@  <i class="fa fa-sign-out" style="color:#EC7063"></i> Exit Time</span>
                                                                <span id="gapping"> @Html.DisplayFor(modelitem => item.Branch)</span><br />
                                                                <span id="gapping">@Html.DisplayFor(modelitem => item.Exit_time)</span>
                                                            </div>

                                                            <div class="col-md-12" style="padding-bottom: 8px;">
                                                                <span class="spnCustom" style="margin-bottom:6px">@*<img src="~/Images/icons8-logout-rounded-16.png" style="color: #827777;">*@  <i class="fa fa-tags" style="color:#F5B041"></i> Status</span><br />
                                                                @if (item.Status == "Out")
                                                                {
                                                                    <span id="gapping" style="margin-top: 1%;" class="badge absent">Out</span>
                                                                }
                                                                else
                                                                {
                                                                    <span id="gapping" style="margin-top: 1%;" class="badge present">In</span>
                                                                }

                                                            </div>

                                                        </div>
                                                    </td>

                                                    <td style="white-space:normal">
                                                        <div class="btn-group-vertical">
                                                            @*<img src="@Html.DisplayFor(modelitem => item.ProfileImage)" alt="" height="50" width="50" style="border-radius: 50%; margin-bottom: 6%" />*@
                                                            <button type="button" title="Edit Visitor" class="btn btn-default" onclick='javascript: displayLivePopUp2("@Url.Content(item.SysVisitorUUId)","@Url.Content(item.FullName)");'><i class="fa fa-pen-to-square"></i></button>
@*                                                            <button type="button" title="Today's Trail" class="btn btn-default" onclick='javascript: displayTrail("@Url.Content(item.sysEmployeeUUID)","@Url.Content(item.FullName)");'><img src=~/Images/icons8-route-40.png style="height:20px; width:20px;" /></button>
*@                                                            @*<a href="javascript:void(0)" title="Map View" onclick='javascript: displayMap("@Url.Content(item.InspectionID)","@Url.Content(item.InspectionNo)","@Url.Content(item.InspectionStatus)","@Url.Content(item.NameOfRoad)");' class="btn btn-default"><i class="fa fa-map-marker"></i></a>*@
                                                            @*<a href="javascript:void(0)" title="Click to view" onclick='javascript: displayTransferAPI("aa");' class="btn btn-round btn-default"><i class="fa fa-location-crosshairs"></i></a>*@
                                                            @*<a href="javascript:void(0)" title="View TimeLine" onclick='javascript: displayTimeline("@Url.Content(item.SysInspectionUUId)","@Url.Content(item.InspectionNo)","@Url.Content(item.InspectionStatus)","@Url.Content(item.NameOfRoad)");' class="btn btn-default"><i class="fa fa-timeline"></i></a>*@
                                                            @*<a href="javascript:void(0)" title="View Images" onclick='javascript: displayPhoto("@Url.Content(item.SysInspectionID)");' class="btn btn-default"><i class="fa fa-camera"></i></a>*@
                                                        </div>
                                                    </td>
                                                </tr>
                                            }

                                        }

                                    </tbody>

                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <div class="modal fade" id="MapModal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="modalHeading">Map View - <small><span class="modal-title" id="ListRFI"></span></small> : <small><span class="modal-title" id="mapStatus"></span></small><br /><small style="font-size:70%"> Road Name - <span class="modal-title" id="mapRoad"></span></small></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="MapModalBody">
                    <div id="map" style="margin-left:2px; border:1px solid #b0b0b0">

                    </div>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
}

<script src="~/plugins/jquery/jquery.js"></script>


<script>
    setTimeout(function () {
        $('#divMsg').fadeOut('fast');
    }, 10000);
    $(document).ready(function () {
        $('a').removeClass('active');
        $('li').removeClass('menu-open');
        $("#liDashboard").addClass('menu-open');
        $("#aDashboard").addClass('active');
        $("#aDashMaster").addClass('active');

        $('#custom-tabs-three-home-tab').addClass('active');

    });

    $('#btn_add').click(function () {
        $('#modalHeader').text('Add Employee');
        $.ajax({
            url: "/EmployeeMaster/AddEmployeeMaster",
            type: "Get",
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (result) {
                //console.log(result);
                $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                $('#AddList').empty();
                $('#AddList').append(result);
                $('#MapPopup').modal('show');
            },
            failure: function (result) {
                alert('Fail To Load data');
            },
            error: function (result) {
            }
        });
    });


    function displayPopup(accID) {
        $('#modalHeader').text('Edit Employee');
        if (accID != "") {
            $.ajax({
                url: "/EmployeeMaster/EditEmployeeMaster",
                type: "Get",
                contentType: "application/json; charset=utf-8",
                data: { "lineid": accID },
                datatype: "json",
                success: function (result) {
                    $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                    $('#AddList').empty();
                    $('#AddList').append(result);
                    $('#MapPopup').modal('show');
                },
                failure: function (result) {
                    alert('Fail To Load data');
                },
                error: function (result) {
                }
            });
        }
    }
</script>

2.AddDepartmentMaster-

@model Digital_Management.Models.Cls_Department

@{
    ViewData["Title"] = "AddDepartmentMaster";
    Layout = null;
}

<div class="panel panel-info">
    <div class="panel-heading"></div>
    <div class="panel-body">

        <div class="row">
            
            <div class="col-md-12">
                <div class="row">

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="VisitorCardNo">Department Name </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Department, new { @class = "form-control", required = "required", placeholder = "Enter Department Name. " })
                            <span id="nameerror" asp-validation-for="Department" class="text-danger"></span>
                        </div>
                    </div>

                </div>
            </div>

            <div class="col-md-3" style="margin-top:4%">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-primary" name="save" value="save" onclick="myFunction()"> Submit </button>

                    <button type="reset" class="btn btn-danger" id="btn_close"> Reset </button>
                </div>
            </div>
        </div>
    </div>
</div>

3.DepartmentMasterView-
@model Digital_Management.Models.Cls_Department

@{
    ViewData["Title"] = "DepartmentMaster";
}

<style>
    .marginBottom {
        margin-bottom: 4px !important;
    }

    .spnCustom {
        color: #827777;
        font-size: 12px;
    }

    .alert {
        /*color: #fff;*/
        background-color: #ffc107;
        /*border-color: #0059FF;*/
        padding: 20px 40px;
        min-width: 420px;
        right: 0px;
        top: 0.5px;
        position: absolute;
        border-radius: 5px;
        border-left: 8px solid #ffa502;
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<div class="content-header">
    @*<div class="container-fluid">*@
    <div class="row mb-2">
        <div class="col-sm-6">
            <h1 class="m-0">Settings <span class="spnCustom">DepartmentList</span></h1>
        </div><!-- /.col -->
        <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
                <li class="breadcrumb-item"><a href="#">DepartmentList</a></li>
                <li class="breadcrumb-item active">Settings</li>
            </ol>
        </div>
    </div>
    @*</div>*@
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    // var Permission = Context.Session.GetString("Permission");

    @if (@ViewBag.Message != null)
    {

        <div class="alert" id="divMsg">
            <span class="msg" style="color:white; font-size: 18px; padding: 0 20px; font-weight: bold;">@ViewBag.Message</span>

        </div>

    }

    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Department List</h3>
                @*<input type="file" name="postedFile" class="btn btn-default" />
            <input type="submit" class="btn btn-warning" value="Upload" name="Upload" id="btnSubmit" />*@
                <a href="#" id="btn_add" title="Add Department" class="btn btn-sm btn-info text-white" style="float:right"><i class="fa fa-plus-circle"></i> Add</a>

            </div>
            <div class="card-body">
                <table id="example1" class="table table-bordered table-striped">
                    <thead class="mytableheader">
                        <tr>

                            <th>Department</th>
                            <th>PostedBy</th>
                            <th>Posted DateTime</th>
                            
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model._List != null && Model._List.Count > 0)
                        {
                            foreach (var item in Model._List)
                            {
                                <tr>

                                    <td>@Html.DisplayFor(modelItem => item.Department)</td>
                                    <td>@Html.DisplayFor(modelItem => item.PostedBy)</td>
                                    <td>@Html.DisplayFor(modelItem => item.PostedDateTime)</td>

                                </tr>
                            }
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>


    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
            </div>
        </div>
    </div>

}


<script src="~/plugins/jquery/jquery.js"></script>


<script>
    setTimeout(function () {
        $('#divMsg').fadeOut('fast');
    }, 3000);

    $(document).ready(function () {
        $('a').removeClass('active');
        $('li').removeClass('menu-open');
        $("#liMaster").addClass('menu-open');
        $("#aMaster").addClass('active');
        $("#aDepartmentMaster").addClass('active');

        $('#custom-tabs-three-home-tab').addClass('active');

    });

    $('#btn_add').click(function () {
        $('#modalHeader').text('Add Department');
        $.ajax({
            url: "/Department/AddDepartmentMaster",
            type: "Get",
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (result) {
                //console.log(result);
                $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                $('#AddList').empty();
                $('#AddList').append(result);
                $('#MapPopup').modal('show');
            },
            failure: function (result) {
                alert('Fail To Load data');
            },
            error: function (result) {
            }
        });
    });


</script>
4.AddEmployeeMaster-

@model Digital_Management.Models.Cls_Employee

@{
    ViewData["Title"] = "AddEmployeeBranch";
    Layout = null;
}

<div class="panel panel-info">
    <div class="panel-heading"></div>
    <div class="panel-body">

        <div class="row">
            @*<div class="col-md-4">
            <div class="form-group">
            <label for="Name">videouudid</label><label style="color:red">*</label>
            @Html.TextBoxFor(model => model.videouudid, new { @class = "form-control", required = "required" })
            </div>
            </div>*@
            <div class="col-md-12">
                <div class="row">


                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="EmployeeId">Employee Id  </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.EmployeeId, new { @class = "form-control", required = "required", placeholder = "Enter EmployeeId " })
                            <span id="nameerror" asp-validation-for="EmployeeId" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Email">Emp FirstName </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", required = "required", placeholder = "Enter FirstName " })
                            <span id="nameerror" asp-validation-for="FirstName" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="LastName">Emp LastName </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", required = "required", placeholder = "Enter LastName " })
                            <span id="nameerror" asp-validation-for="LastName" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Phone">Contact No. </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", required = "required", placeholder = "Enter Contact No. " })
                            <span id="nameerror" asp-validation-for="Phone" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="EmailId">EmailId </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.EmailId, new { @class = "form-control", required = "required", placeholder = "Enter EmailId" })
                            <span id="nameerror" asp-validation-for="EmailId" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="selDepartmentId">Department </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.selDepartmentId, new SelectList(Model.DepartmentDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.selDepartmentId), "Select Department", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selDepartmentId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                </div>
            </div>

            <div class="col-md-3" style="margin-top:4%">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-primary" name="save" value="save" onclick="myFunction()"> Submit </button>

                    <button type="reset" class="btn btn-danger" id="btn_close"> Reset </button>
                </div>
            </div>
        </div>
    </div>
</div>

5.EditEmployeeStatus-

@model Digital_Management.Models.Cls_Employee

<div class="panel panel-info">
    <div class="panel-heading">@Html.Raw(Model.EmployeeName)</div>
    <div class="panel-body">

        <div class="row">

            <div class="col-md-4" hidden="hidden">
                <div class="form-group">
                    <label for="EmpId">Emp Id </label><label style="color:red">*</label>
                    @Html.TextBoxFor(model => model.LineId, new { @class = "form-control", required = "required", placeholder = "Enter EmpId " })
                    @Html.ValidationMessageFor(model => model.LineId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group">
                    <label for="EmpId">Status</label><label style="color:red">*</label>
                    @Html.DropDownListFor(model => model.Status, new SelectList(Model.StatusList.Select(x => new { Value = x.Value, Text = x.Text, }), "Value", "Text", Model.selStatusId), "Select Status", new { @class = "form-control" })

                </div>
            </div>


            <div class="col-md-12">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-default" name="status" value="status">Save</button>
                    @*<button type="reset" class="btn btn-danger" id="btn_close"><i class="fa fa-close"> Reset</i></button>*@
                </div>
            </div>
        </div>
    </div>
</div>

6.EmployeeMaster-

@model Digital_Management.Models.Cls_Employee

@{
    ViewData["Title"] = "EmployeeMaster";
}

<style>
    .marginBottom {
        margin-bottom: 4px !important;
    }

    .spnCustom {
        color: #827777;
        font-size: 12px;
    }

    .alert {
        /*color: #fff;*/
        background-color: #ffc107;
        /*border-color: #0059FF;*/
        padding: 20px 40px;
        min-width: 420px;
        right: 0px;
        top: 0.5px;
        position: absolute;
        border-radius: 5px;
        border-left: 8px solid #ffa502;
    }

    .fa-toggle-on:before {
        color: green;
    }

    .fa-toggle-off:before {
        color: red;
    }

</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<div class="content-header">
    @*<div class="container-fluid">*@
    <div class="row mb-2">
        <div class="col-sm-6">
            <h1 class="m-0">Settings <span class="spnCustom">EmployeeList</span></h1>
        </div><!-- /.col -->
        <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
                <li class="breadcrumb-item"><a href="#">EmployeeList</a></li>
                <li class="breadcrumb-item active">Settings</li>
            </ol>
        </div>
    </div>
    @*</div>*@
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    // var Permission = Context.Session.GetString("Permission");

    @if (@ViewBag.Message != null)
    {

        <div class="alert" id="divMsg">
            <span class="msg" style="color:white; font-size: 18px; padding: 0 20px; font-weight: bold;">@ViewBag.Message</span>

        </div>

    }

    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Employee List</h3>
                  <input type="file" name="postedFile" class="btn btn-default" />
                <input type="submit" class="btn btn-warning" value="Upload" name="Upload" id="btnSubmit" />
                <a href="#" id="btn_add" title="Add Employee" class="btn btn-sm btn-info text-white" style="float:right"><i class="fa fa-plus-circle"></i> Add</a>

            </div>
            <div class="card-body">
                <table id="example1" class="table table-bordered table-striped">
                    <thead class="mytableheader">
                        <tr>

                            <th>Action</th>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>Email</th>
                            <th>Contact No.</th>
                            <th>Department</th>
                            @*<th>Location</th>*@
                            @*<th>PostedDateTime</th>*@

                        </tr>
                    </thead>
                    <tbody>
                        @if (Model._List != null && Model._List.Count > 0)
                        {
                            foreach (var item in Model._List)
                            {
                                <tr>
                                    <td>
                                        <div class="btn-group">
                                            @if (item.Status == "Active")
                                            {
                                                <button type="button" title="Click To InActive Employee" onclick='javascript: displayStatusPopup("@Url.Content(item.LineId.ToString())");' class="btn btn-round btn-default fa fa-toggle-on"></button>
                                            }
                                            else
                                            {
                                                <button type="button" title="Click To Active Employee" onclick='javascript: displayStatusPopup("@Url.Content(item.LineId.ToString())");' class="btn btn-round btn-default fa fa-toggle-off"></button>
                                            }
                                        </div>
                                    </td>
                                    @*<td>@Html.DisplayFor(modelItem => item.Status)</td>*@
                                    <td>@Html.DisplayFor(modelItem => item.FirstName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.LastName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.EmailId)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Phone)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Department)</td>
                                    @*<td>@Html.DisplayFor(modelItem => item.Location)</td>*@
                                    
                                    @*<td>@Html.DisplayFor(modelItem => item.PostedDateTime)</td>*@
                                </tr>
                            }
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>


    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade bs-example-modal-sm" id="EditPopup" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-sm" @*style="max-width:200px"*@>
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="mHeader"></h4>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                        
                    </div>
                    <div class="modal-body" id="EditbodyList">
                    </div>
                </div>
            </div>
    </div>

}


<script src="~/plugins/jquery/jquery.js"></script>


<script>
    setTimeout(function () {
        $('#divMsg').fadeOut('fast');
    }, 3000);
    
    $(document).ready(function () {
        $('a').removeClass('active');
        $('li').removeClass('menu-open');
        $("#liMaster").addClass('menu-open');
        $("#aMaster").addClass('active');
        $("#aEmpMaster").addClass('active');

        $('#custom-tabs-three-home-tab').addClass('active');

    });

    $('#btn_add').click(function () {
        $('#modalHeader').text('Add Employee');
        $.ajax({
            url: "/Employee/AddEmployeeMaster",
            type: "Get",
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (result) {
                //console.log(result);
                $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                $('#AddList').empty();
                $('#AddList').append(result);
                $('#MapPopup').modal('show');
            },
            failure: function (result) {
                alert('Fail To Load data');
            },
            error: function (result) {
            }
        });
    });


    function displayStatusPopup(accID) {
        $('#mHeader').text('Edit Employee Status');
        if (accID != "") {
            $.ajax({
                url: "/Employee/EditEmployeeStatus",
                type: "Get",
                contentType: "application/json; charset=utf-8",
                data: { "lineid": accID },
                datatype: "json",
                success: function (result) {
                    $('#EditPopup').modal({ backdrop: 'static' });//, keyboard: false
                    $('#EditbodyList').empty();
                    $('#EditbodyList').append(result);
                    $('#EditPopup').modal('show');
                },
                failure: function (result) {
                    alert('Fail To Load data');
                },
                error: function (result) {
                }
            });
        }
    }


</script>

7.AddExistingVisitorMaster-

@model Digital_Management.Models.Cls_Visitor
<link href="~/css/bootstrap-multiselect.css" rel="stylesheet" />


@{
    ViewData["Title"] = "AddExisitingVisitorMaster";
    Layout = null;
}

<div class="panel panel-info">
    <div class="panel-heading"></div>
    <div class="panel-body">

        <div class="row">

            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-4" hidden="hidden">
                        <div class="form-group">
                            <label for="Visitor_id">Visitor Id </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Visitor_id, new { @class = "form-control", required = "required", placeholder = "Enter Visitor_id " ,@readonly = "readonly"})
                            @Html.ValidationMessageFor(model => model.Visitor_id, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="FirstName">First Name </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Firstname, new { @class = "form-control", required = "required", placeholder = "Enter FirstName " })
                            <span id="nameerror" asp-validation-for="Firstname" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="LastName">Last Name </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Lastname, new { @class = "form-control", required = "required", placeholder = "Enter LastName " })
                            <span id="nameerror1" asp-validation-for="Lastname" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="No_Of_Visitor">No.Of Visitor </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.No_Of_Visitor, new { @class = "form-control", required = "required", placeholder = "Enter No.Of Visitor " })
                            <span id="nameerror1" asp-validation-for="No_Of_Visitor" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Phone">Phone </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Phone, new { placeholder = "Enter Phone", @class = "form-control", required = "required"})
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Address">Address </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Address, new { @class = "form-control", required = "required", placeholder = "Enter Address " })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Company_name">Company Name</label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Company_name, new { @class = "form-control", required = "required", placeholder = "Enter Company Name " })
                            <span id="nameerror1" asp-validation-for="Company_name" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group" id="valemail">
                            <label for="EmailId">Email Id </label>
                            @*<input type="email" class = "form-control" id="EmailId" required = "required" placeholder = "Enter EmailId ">*@
                            @Html.TextBoxFor(model => model.Emailid, new { @class = "form-control", type="email", placeholder = "Enter EmailId "})
                            <span id="error" asp-validation-for="Emailid" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="selVisitingId">PurposeOfVisit </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.selVisitingId, new SelectList(Model.VisitingPurposeDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.selVisitingId), "Select PurposeOfVisit", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selVisitingId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Id_proofDDL">Id Proof </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.selIdproofId, new SelectList(Model.Id_proofDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.Id_proofDDL), "Select Id Proof", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selIdproofId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="selDepartmentId">Department </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.selDepartmentId, new SelectList(Model.DepartmentDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.selDepartmentId), "Select Department", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selDepartmentId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="EmployeeDDL">Whom To Meet </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.selEmployeeId, new SelectList(Model.EmployeeDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.EmployeeDDL), "Whom To Meet", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selEmployeeId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="VCardDDL">Visitor's Card No. </label><label style="color:red">*</label>
                            @Html.ListBoxFor(model => model.selVCardId, new SelectList(Model.VCardDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.selVCardId), new { @class = "boot-multiselect-demo  form-control", required = "required"})

                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selVCardId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="AccessoriesDDL">Accessories </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.selAccessoriesId, new SelectList(Model.AccessoriesDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.AccessoriesDDL), "Select Accessories", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selAccessoriesId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="ProfilePhoto"> Photo </label>
                            <input type="file" name="postedFile" class="btn btn-sm btn-primary" style="width:100%" />
                        </div>
                    </div>

                </div>
            </div>

            <div class="col-md-3" style="margin-top:4%">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-primary" name="save" value="save" onclick="myFunction()"> save</button>
                    <button type="reset" class="btn btn-danger" id="btn_close"> Reset</button>
                </div>
            </div>

        </div>
    </div>
</div>


<script src="~/Js/jquery-ui.js"></script>
<script src="~/Js/bootstrap-multiselect.js"></script>


<script>
    $(document).ready(function () {


        $('#selVCardId').multiselect({
            nonSelectedText: 'Select VisitorCard',
            includeSelectAllOption: true,
            buttonWidth: 245,
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true,
            numberDisplayed: 5
        });
        //$("i").removeClass('glyphicon glyphicon-search').addClass('fa fa-search');
    });
</script>  
8.ExistingVisitorMaster-

@model Digital_Management.Models.Cls_Visitor

@{
    ViewData["Title"] = "ExisitingVisitorMaster";
}

<style>
    .marginBottom {
        margin-bottom: 4px !important;
    }

    .spnCustom {
        color: #827777;
        font-size: 12px;
    }

    .alert {
        /*color: #fff;*/
        background-color: #ffc107;
        /*border-color: #0059FF;*/
        padding: 20px 40px;
        min-width: 420px;
        right: 0px;
        top: 0.5px;
        position: absolute;
        border-radius: 5px;
        border-left: 8px solid #ffa502;
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>


<div class="content-header">
    @*<div class="container-fluid">*@
    <div class="row mb-2">
        <div class="col-sm-6">
            <h1 class="m-0">Home <span class="spnCustom">ExistingVisitorList</span></h1>
        </div><!-- /.col -->
        <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
                <li class="breadcrumb-item"><a href="#">ExistingVisitorList</a></li>
                <li class="breadcrumb-item active">Home</li>
            </ol>
        </div>
    </div>
    @*</div>*@
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    // var Permission = Context.Session.GetString("Permission");

    @if (@ViewBag.Message != null)
    {

        <div class="alert" id="divMsg">
            <span class="msg" style="color:white; font-size: 18px; padding: 0 20px; font-weight: bold;">@ViewBag.Message</span>

        </div>

    }

    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">ExistingVisitor List</h3>

                <a href="#" id="btn_add" title="Add Visitor" class="btn btn-sm btn-info text-white" style="float:right"><i class="fa fa-plus-circle"></i> Add</a>

            </div>
            <div class="card-body">
                <table id="example1" class="table table-bordered table-striped">
                    <thead class="mytableheader">
                        <tr>

                            @* <th>Visitor_Id</th>*@
                            @*<th>Card#</th>*@
                            <th>Photo</th>
                            <th>InTime</th>
                            <th>Exit Time</th>
                            <th>FName</th>
                            <th>LName</th>
                            <th>Dept.</th>
                            <th>MeetingWith</th>
                            <th>CompanyName</th>
                            <th>Action</th>
                            <th>Contact No.</th>
                            <th>Address</th>
                            <th>Purpose</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model._List != null && Model._List.Count > 0)
                        {
                            foreach (var item in Model._List)
                            {
                                <tr>

                                    @*<td>@Html.DisplayFor(modelItem => item.Visitor_id)</td>*@
                                    @*<td>@Html.DisplayFor(modelItem => item.VisitorCardNo)</td>*@
                                    <td><img src="@Html.DisplayFor(modelitem => item.Photo)" alt="" height="50" width="50" style="border-radius: 50%; border:2px solid #424949 ;" /></td>
                                    <td>@Html.DisplayFor(modelItem => item.Entry_time)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Exit_time)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Firstname)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Lastname)</td>

                                    <td>@Html.DisplayFor(modelItem => item.Department)</td>
                                    <td>@Html.DisplayFor(modelItem => item.whom_to_meet)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Company_name)</td>
                                    <td>
                                        <button type="button" title="Click To Add" onclick='javascript: displayPopup("@Url.Content(item.Visitor_id.ToString())");' class="btn btn-round btn btn-success fa fa-user-plus"></button>
                                    </td>
                                    <td>@Html.DisplayFor(modelItem => item.Phone)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Address)</td>
                                    <td>@Html.DisplayFor(modelItem => item.PurposeOfVisit)</td>

                                </tr>
                            }
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>


    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>

            </div>
        </div>
    </div>

    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>

            </div>
        </div>
    </div>

}

<script src="~/plugins/jquery/jquery.js"></script>


<script>
    setTimeout(function () {
        $('#divMsg').fadeOut('fast');
    }, 3000);

   
    $(document).ready(function () {
        $('a').removeClass('active');
        $('li').removeClass('menu-open');
        $("#liDashboard").addClass('menu-open');
        $("#aDashboard").addClass('active');
        $("#aExistingVisitorMaster").addClass('active');

        $('#custom-tabs-three-home-tab').addClass('active');

    });

    function displayPopup(accId) {
        $('#modalHeader').text('Add Existing Visitor');
        if (accId != "") {
            console.log(accId);
            $.ajax({
                url: "/ExisitingVisitor/AddExisitingVisitorMaster",
                type: "get",
                contentType: "application/json",
                data: { "Visitor_id": accId },
                datatype: "json",
                success: function (result) {
                    $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                    $('#AddList').empty();
                    $('#AddList').append(result);
                    $('#MapPopup').modal('show');
                },
                error: function (result) {
                    alert('Failed to Add visitor');
                }
            });
        }
    }
</script>

9.AddMasterIdProof-

@model Digital_Management.Models.Cls_IdProof

@{
    ViewData["Title"] = "AddMasterIdProof";
    Layout = null;
}

<div class="panel panel-info">
    <div class="panel-heading"></div>
    <div class="panel-body">

        <div class="row">
            
            <div class="col-md-12">
                <div class="row">

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Idproof">Id Proof </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Idproof, new { @class = "form-control", required = "required", placeholder = "Enter Id proof. " })
                            <span id="nameerror" asp-validation-for="Idproof" class="text-danger"></span>
                        </div>
                    </div>

                </div>
            </div>

            <div class="col-md-3" style="margin-top:4%">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-primary" name="save" value="save" onclick="myFunction()"> Submit </button>

                    <button type="reset" class="btn btn-danger" id="btn_close"> Reset </button>
                </div>
            </div>
        </div>
    </div>
</div>

10.MasterIdProof-

@model Digital_Management.Models.Cls_IdProof

@{
    ViewData["Title"] = "MasterIdProof";
}

<style>
    .marginBottom {
        margin-bottom: 4px !important;
    }

    .spnCustom {
        color: #827777;
        font-size: 12px;
    }

    .alert {
        /*color: #fff;*/
        background-color: #ffc107;
        /*border-color: #0059FF;*/
        padding: 20px 40px;
        min-width: 420px;
        right: 0px;
        top: 0.5px;
        position: absolute;
        border-radius: 5px;
        border-left: 8px solid #ffa502;
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<div class="content-header">
    @*<div class="container-fluid">*@
    <div class="row mb-2">
        <div class="col-sm-6">
            <h1 class="m-0">Settings <span class="spnCustom">IdProofList</span></h1>
        </div><!-- /.col -->
        <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
                <li class="breadcrumb-item"><a href="#">IdProofList</a></li>
                <li class="breadcrumb-item active">Settings</li>
            </ol>
        </div>
    </div>
    @*</div>*@
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    // var Permission = Context.Session.GetString("Permission");

    @if (@ViewBag.Message != null)
    {

        <div class="alert" id="divMsg">
            <span class="msg" style="color:white; font-size: 18px; padding: 0 20px; font-weight: bold;">@ViewBag.Message</span>

        </div>

    }

    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">IdProof List</h3>
                @*<input type="file" name="postedFile" class="btn btn-default" />
            <input type="submit" class="btn btn-warning" value="Upload" name="Upload" id="btnSubmit" />*@
                <a href="#" id="btn_add" title="Add IdProof" class="btn btn-sm btn-info text-white" style="float:right"><i class="fa fa-plus-circle"></i> Add</a>

            </div>
            <div class="card-body">
                <table id="example1" class="table table-bordered table-striped">
                    <thead class="mytableheader">
                        <tr>
                            
                            <th>Id Proof</th>
                            <th>PostedBy</th>
                            <th>Posted DateTime</th>

                        </tr>
                    </thead>
                    <tbody>
                        @if (Model._List != null && Model._List.Count > 0)
                        {
                            foreach (var item in Model._List)
                            {
                                <tr>

                                    <td>@Html.DisplayFor(modelItem => item.Idproof)</td>
                                    <td>@Html.DisplayFor(modelItem => item.PostedBy)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Posteddatetime)</td>

                                </tr>
                            }
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>


    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
            </div>
        </div>
    </div>

}


<script src="~/plugins/jquery/jquery.js"></script>


<script>
    setTimeout(function () {
        $('#divMsg').fadeOut('fast');
    }, 3000);
    $(document).ready(function () {
        $('a').removeClass('active');
        $('li').removeClass('menu-open');
        $("#liMaster").addClass('menu-open');
        $("#aMaster").addClass('active');
        $("#aIdProofMaster").addClass('active');

        $('#custom-tabs-three-home-tab').addClass('active');

    });



    $('#btn_add').click(function () {
        $('#modalHeader').text('Add Department');
        $.ajax({
            url: "/IdProof/AddMasterIdProof",
            type: "Get",
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (result) {
                //console.log(result);
                $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                $('#AddList').empty();
                $('#AddList').append(result);
                $('#MapPopup').modal('show');
            },
            failure: function (result) {
                alert('Fail To Load data');
            },
            error: function (result) {
            }
        });
    });


</script>

11.Login-

@model Digital_Management.Models.Cls_Login
@{
    Layout = null;
    ViewBag.Title = "Login";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Digital Manage | Log in</title>
    <!-- Google Font: Source Sans Pro -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
    <!-- Font Awesome -->
    @*<link href="~/plugins/fontawesome/css/all.min.css" rel="stylesheet" />*@
    <link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />
    <!-- icheck bootstrap -->
    <link rel="stylesheet" href="~/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
    <!-- Theme style -->
    <link href="~/dist/css/adminlte.min.css" rel="stylesheet" />
</head>

<style>

    /*body, html {
                height: 100%;
                margin: 0;
            }*/

    /*.bgimg-1, .bgimg-2, .bgimg-3 {
                position: relative;
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover;
            }

            .bgimg-1 {
                background-image: url('../Images/KYTE LOGIN BACKGROUND.png');
                height: 100%;
            }*/
</style>

<body class="hold-transition login-page bgimg-1" style="overflow: hidden;">
    <div class="login-box" style="opacity: 1.0;">
        @using (Html.BeginForm("Login", "Login", FormMethod.Post))
        {

            <div class="card">
                <div class="card-body login-card-body" style="border-radius:10px">
                    <div class="login-logo">
                        <a href="#">
@*                            <img src="~/Images/Logo.jpg" style="height:100px; width:185px;">*@

                            @*<img src="~/Logo/RCD_logo_512x512-01_second-removebg-preview.png">*@
                        </a>
                    </div>
                    <p class="login-box-msg">Sign in to start your session</p>
                    <form>
                        <div class="input-group mb-3">
                            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", placeholder = "UserName", required = "required", })
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fa fa-envelope"></span>
                                </div>
                            </div>
                        </div>
                        <div class="input-group mb-3">
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Password", required = "required" })
                            <div class="input-group-append">
                                <div class="input-group-text">
                                    <span class="fa fa-lock"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-8">
                                <div class="icheck-primary" style="display:none">
                                    <input type="checkbox" id="remember">
                                    <label for="remember">
                                        Remember Me
                                    </label>
                                </div>
                            </div>
                            <!-- /.col -->
                            <div class="col-4">
                                <button type="submit" class="btn btn-warning btn-block" style="color:white">Sign In</button>
                            </div>
                            <!-- /.col -->
                        </div>
                    </form>
                    @if (@ViewBag.Message != null)
                    {

                        <div class="row" id="divMsg" style="margin-top:1%">
                            <div class="col-md-12">
                                <div class="card card-default">
                                    <div class="card-body">
                                        <div class="alert alert-danger">
                                            <h5><i class="fa fa-exclamation-triangle"></i> Alert!</h5>
                                            @ViewBag.Message
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
                <!-- /.login-card-body -->
            </div>

        }
    </div>

    <footer style="text-align:center; margin-top:3%;">
       <div>
            @*<strong class="badge" style="background-color:white; color:black">
                Powered by <a href="https://laayn.com/" target="_blank" style="color:#fd7e14">
                    Laayn Technologies Pvt. Ltd.
                </a>  All rights reserved.
            </strong>*@
            @*</strong><span class="white" style="padding-left:0px"> All rights reserved.</span>
            <br />*@
            @* <strong>
            <a href="@Url.Action("DownloadAPK", "Login")" target="_blank" class="text-yellow">Click here</a>
            </strong><span class="white" style="padding-left:0px"> to download PPMS app for FE <i class="fa fa-android"></i></span>*@
       </div>
    </footer>

    <!-- /.login-box -->
    <!-- jQuery -->
    <script src="~/plugins/jquery/jquery.min.js"></script>
    <!-- Bootstrap 4 -->
    <script src="~/plugins/bootstrap/js/bootstrap.bundle.js"></script>
    <!-- AdminLTE App -->
    <script src="~/dist/js/adminlte.min.js"></script>
</body>
</html>

12.AddMasterBranch-

@model Digital_Management.Models.Cls_Branch

@{
    ViewData["Title"] = "AddMasterBranch";
    Layout = null;
}

<div class="panel panel-info">
    <div class="panel-heading"></div>
    <div class="panel-body">

        <div class="row">
            @*<div class="col-md-4">
            <div class="form-group">
            <label for="Name">videouudid</label><label style="color:red">*</label>
            @Html.TextBoxFor(model => model.videouudid, new { @class = "form-control", required = "required" })
            </div>
            </div>*@
            <div class="col-md-12">
                <div class="row">


                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="BranchName">Branch Name </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.BranchName, new { @class = "form-control", required = "required", placeholder = "Enter Branch Name " })
                            <span id="nameerror" asp-validation-for="BranchName" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Email">Contact Email </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", required = "required", placeholder = "Enter Contact Email. " })
                            <span id="nameerror" asp-validation-for="Email" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Phone">Contact No. </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", required = "required", placeholder = "Enter Contact No. " })
                            <span id="nameerror" asp-validation-for="Phone" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Locaation">Location </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Locaation, new { @class = "form-control", required = "required", placeholder = "Enter Location. " })
                            <span id="nameerror" asp-validation-for="Locaation" class="text-danger"></span>
                        </div>
                    </div>

                </div>
            </div>

            <div class="col-md-3" style="margin-top:4%">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-primary" name="save" value="save" onclick="myFunction()"> Submit </button>

                    <button type="reset" class="btn btn-danger" id="btn_close"> Reset </button>
                </div>
            </div>
        </div>
    </div>
</div>

13-EditBranchStatus-

@model Digital_Management.Models.Cls_Branch

<div class="panel panel-info">
    <div class="panel-heading">@Html.Raw(Model.BranchName)</div>
    <div class="panel-body">

        <div class="row">

            <div class="col-md-4" hidden="hidden">
                <div class="form-group">
                    <label for="EmpId">Branch Id </label><label style="color:red">*</label>
                    @Html.TextBoxFor(model => model.LineID, new { @class = "form-control", required = "required", placeholder = "Enter EmpId " })
                    @Html.ValidationMessageFor(model => model.LineID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group">
                    <label for="EmpId">Status</label><label style="color:red">*</label>
                    @Html.DropDownListFor(model => model.Status, new SelectList(Model.StatusList.Select(x => new { Value = x.Value, Text = x.Text, }), "Value", "Text", Model.selStatusId), "Select Status", new { @class = "form-control" })

                </div>
            </div>


            <div class="col-md-12">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-default" name="status" value="status">Save</button>
                    @*<button type="reset" class="btn btn-danger" id="btn_close"><i class="fa fa-close"> Reset</i></button>*@
                </div>
            </div>
        </div>
    </div>
</div>

14.MasterBranch-

@model Digital_Management.Models.Cls_Branch

@{
    ViewData["Title"] = "MasterBranch";
}

<style>
    .marginBottom {
        margin-bottom: 4px !important;
    }

    .spnCustom {
        color: #827777;
        font-size: 12px;
    }

    .sidebar-dark-primary .nav-sidebar > .nav-item > .nav-link.active, .sidebar-light-primary .nav-sidebar > .nav-item > .nav-link.active {
        background-color: #007bff;
        color: #fff;
    }


    .alert {
        /*color: #fff;*/
        background-color: #ffc107;
        /*border-color: #0059FF;*/
        padding: 20px 40px;
        min-width: 420px;
        right: 0px;
        top: 0.5px;
        position: absolute;
        border-radius: 5px;
        border-left: 8px solid #ffa502;
    }

    .fa-toggle-on:before {
        color: green;
    }

    .fa-toggle-off:before {
        color: red;
    }

</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<div class="content-header">
    @*<div class="container-fluid">*@
    <div class="row mb-2">
        <div class="col-sm-6">
            <h1 class="m-0">Settings <span class="spnCustom">BranchList</span></h1>
        </div><!-- /.col -->
        <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
                <li class="breadcrumb-item"><a href="#">BranchList</a></li>
                <li class="breadcrumb-item active">Settings</li>
            </ol>
        </div>
    </div>
    @*</div>*@
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    // var Permission = Context.Session.GetString("Permission");

    @if (@ViewBag.Message != null)
    {

        <div class="alert" id="divMsg">
            <span class="msg" style="color:white; font-size: 18px; padding: 0 20px; font-weight: bold;">@ViewBag.Message</span>

        </div>

    }

    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Branch List</h3>
                @*<input type="file" name="postedFile" class="btn btn-default" />
            <input type="submit" class="btn btn-warning" value="Upload" name="Upload" id="btnSubmit" />*@
                <a href="#" id="btn_add" title="Add Branch" class="btn btn-sm btn-info text-white" style="float:right"><i class="fa fa-plus-circle"></i> Add</a>

            </div>
            <div class="card-body">
                <table id="example1" class="table table-bordered table-striped">
                    <thead class="mytableheader">
                        <tr>
                            <th>Action</th>
                            <th>BranchName</th>
                            <th>Email</th>
                            <th>Location</th>
                            <th>Password</th>
                            <th>Phone</th>                            
                            <th>Posteddatetime</th>
                            
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model._List != null && Model._List.Count > 0)
                        {
                            foreach (var item in Model._List)
                            {
                                <tr>
                                    <td>
                                        <div class="btn-group">
                                            @if (item.Status == "Active")
                                            {
                                                <button type="button" title="Click To InActive Branch" onclick='javascript: displayStatusPopup("@Url.Content(item.LineID.ToString())");' class="btn btn-round btn-default fa fa-toggle-on"></button>
                                            }
                                            else
                                            {
                                                <button type="button" title="Click To Active Branch" onclick='javascript: displayStatusPopup("@Url.Content(item.LineID.ToString())");' class="btn btn-round btn-default fa fa-toggle-off"></button>
                                            }
                                        </div>
                                    </td>
                                    <td>@Html.DisplayFor(modelItem => item.BranchName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Email)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Locaation)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Password)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Phone)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Posteddatetime)</td>

                                </tr>
                            }
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>


    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade bs-example-modal-sm" id="EditPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-sm" @*style="max-width:200px"*@>
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="mHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>

                </div>
                <div class="modal-body" id="EditbodyList">
                </div>
            </div>
        </div>
    </div>

}


<script src="~/plugins/jquery/jquery.js"></script>


<script>
    setTimeout(function () {
        $('#divMsg').fadeOut('fast');
    }, 3000);
    
    $(document).ready(function () {
        $('a').removeClass('active');
        $('li').removeClass('menu-open');
        $("#liMaster").addClass('menu-open');
        $("#aMaster").addClass('active');
        $("#aBranchMaster").addClass('active');

        $('#custom-tabs-three-home-tab').addClass('active');

    });

    $('#btn_add').click(function () {
        $('#modalHeader').text('Add Branch');
        $.ajax({
            url: "/MasterBranch/AddMasterBranch",
            type: "Get",
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (result) {
                //console.log(result);
                $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                $('#AddList').empty();
                $('#AddList').append(result);
                $('#MapPopup').modal('show');
            },
            failure: function (result) {
                alert('Fail To Load data');
            },
            error: function (result) {
            }
        });
    });

    function displayStatusPopup(accID) {
        $('#mHeader').text('Edit Branch Status');
        if (accID != "") {
            $.ajax({
                url: "/MasterBranch/EditBranchStatus",
                type: "Get",
                contentType: "application/json; charset=utf-8",
                data: { "lineid": accID },
                datatype: "json",
                success: function (result) {
                    $('#EditPopup').modal({ backdrop: 'static' });//, keyboard: false
                    $('#EditbodyList').empty();
                    $('#EditbodyList').append(result);
                    $('#EditPopup').modal('show');
                },
                failure: function (result) {
                    alert('Fail To Load data');
                },
                error: function (result) {
                }
            });
        }
    }


</script>

15.AddMasterVisitingPurpose-

@model Digital_Management.Models.Cls_Purpose

@{
    ViewData["Title"] = "AddMasterVisitingPurpose";
    Layout = null;
}

<div class="panel panel-info">
    <div class="panel-heading"></div>
    <div class="panel-body">

        <div class="row">

            <div class="col-md-12">
                <div class="row">

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="selVisitingId">PurposeOfVisit </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.purpose_of_visit, new { @class = "form-control", required = "required", placeholder = "Enter VisitingPurpose " })
                            @Html.ValidationMessageFor(model => model.purpose_of_visit, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
            </div>

            <div class="col-md-3" style="margin-top:4%">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-primary" name="save" value="save" onclick="myFunction()"> Submit </button>

                    <button type="reset" class="btn btn-danger" id="btn_close"> Reset </button>
                </div>
            </div>
        </div>
    </div>
</div>

16.MasterVisitingPurpose-

@model Digital_Management.Models.Cls_Purpose

@{
    ViewData["Title"] = "MasterVisitingPurpose";
}

<style>
    .marginBottom {
        margin-bottom: 4px !important;
    }

    .spnCustom {
        color: #827777;
        font-size: 12px;
    }

    .alert {
        /*color: #fff;*/
        background-color: #ffc107;
        /*border-color: #0059FF;*/
        padding: 20px 40px;
        min-width: 420px;
        right: 0px;
        top: 0.5px;
        position: absolute;
        border-radius: 5px;
        border-left: 8px solid #ffa502;
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<div class="content-header">
    @*<div class="container-fluid">*@
    <div class="row mb-2">
        <div class="col-sm-6">
            <h1 class="m-0">Settings <span class="spnCustom">PurposeList</span></h1>
        </div><!-- /.col -->
        <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
                <li class="breadcrumb-item"><a href="#">PurposeList</a></li>
                <li class="breadcrumb-item active">Settings</li>
            </ol>
        </div>
    </div>
    @*</div>*@
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    // var Permission = Context.Session.GetString("Permission");

    @if (@ViewBag.Message != null)
    {

        <div class="alert" id="divMsg">
            <span class="msg" style="color:white; font-size: 18px; padding: 0 20px; font-weight: bold;">@ViewBag.Message</span>

        </div>

    }

    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Purpose List</h3>
                @*<input type="file" name="postedFile" class="btn btn-default" />
            <input type="submit" class="btn btn-warning" value="Upload" name="Upload" id="btnSubmit" />*@
                <a href="#" id="btn_add" title="Add Branch" class="btn btn-sm btn-info text-white" style="float:right"><i class="fa fa-plus-circle"></i> Add</a>

            </div>
            <div class="card-body">
                <table id="example1" class="table table-bordered table-striped">
                    <thead class="mytableheader">
                        <tr>

                            <th>Visitong Purpose</th>
                            <th>Postedby </th>
                            <th>Posteddatetime</th>

                        </tr>
                    </thead>
                    <tbody>
                        @if (Model._List != null && Model._List.Count > 0)
                        {
                            foreach (var item in Model._List)
                            {
                                <tr>

                                    <td>@Html.DisplayFor(modelItem => item.purpose_of_visit)</td>
                                    <td>@Html.DisplayFor(modelItem => item.PostedBy)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Posteddatetime)</td>

                                </tr>
                            }
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>


    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
            </div>
        </div>
    </div>

}


<script src="~/plugins/jquery/jquery.js"></script>


<script>
    setTimeout(function () {
        $('#divMsg').fadeOut('fast');
    }, 3000);
   
   
    $(document).ready(function () {
        $('a').removeClass('active');
        $('li').removeClass('menu-open');
        $("#liMaster").addClass('menu-open');
        $("#aMaster").addClass('active');
        $("#aPurposeMaster").addClass('active');

        $('#custom-tabs-three-home-tab').addClass('active');

    });

    $('#btn_add').click(function () {
        $('#modalHeader').text('Add Branch');
        $.ajax({
            url: "/MasterPurpose/AddMasterVisitingPurpose",
            type: "Get",
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (result) {
                //console.log(result);
                $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                $('#AddList').empty();
                $('#AddList').append(result);
                $('#MapPopup').modal('show');
            },
            failure: function (result) {
                alert('Fail To Load data');
            },
            error: function (result) {
            }
        });
    });




</script>

17.Layout-

@using Microsoft.AspNetCore.Http
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title> Digital Management </title>

    <!-- Google Font: Source Sans Pro -->
    @*<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="../../plugins/fontawesome-free/css/all.min.css">
    <!-- Theme style -->
    <link rel="stylesheet" href="../../dist/css/adminlte.min.css">
    <link href="~/layoutstylesheet.css" rel="stylesheet" />*@


    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="~/plugins/fontawesome-free/css/all.min.css">
    <!-- IonIcons -->
    @*<link rel="stylesheet" href="~/css/ionicons.min.css">*@
    <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">

    <!-- Google Font: Source Sans Pro -->
    <link href="~/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css" rel="stylesheet" />

    <link href="~/plugins/icheck-bootstrap/icheck-bootstrap.min.css" rel="stylesheet" />
    @*<link href="~/plugins/select2/css/select2.min.css" rel="stylesheet" />*@
    @*<link href="~/css/bootstrap-multiselect.css" rel="stylesheet" />*@


    @*<link href="~/plugins/overlayScrollbars/css/OverlayScrollbars.min.css" rel="stylesheet" />*@
    <link href="~/plugins/overlayScrollbars/css/OverlayScrollbars.min.css" rel="stylesheet" />
    <link href="~/plugins/daterangepicker/daterangepicker.css" rel="stylesheet" />
    <link href="~/css/jquery-ui-timepicker-addon.min.css" rel="stylesheet" />
    <link href="~/plugins/jquery-ui/jquery-ui.css" rel="stylesheet" />

    <link rel="stylesheet" href="~/plugins/summernote/summernote-bs4.min.css">
    <link href="~/plugins/datatables-bs4/css/dataTables.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-responsive/css/responsive.bootstrap4.css" rel="stylesheet" />
    <link href="~/plugins/datatables-buttons/css/buttons.bootstrap4.css" rel="stylesheet" />
    <!-- Theme style -->
    <link href="~/dist/css/adminlte.min.css" rel="stylesheet" />
    @*<link href="~/css/adminlte.css" rel="stylesheet" />*@
    <link href="~/css/bootstrap-multiselect.css" rel="stylesheet" />
    @*<link href="~/css/photoviewer.css" rel="stylesheet"   />*@


    @*<style>
    body {
    /*font-family: 'system-ui';*/
    /*font-family: 'Open Sans', sans-serif;*/
    font-family:'open sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
    /*font-family: 'Roboto', sans-serif;*/
    }
    </style>*@
    <style>
        .main-header .logo .logo-mini {
            display: none;
        }

        .preloader {
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            width: 100%;
            height: 100vh;
            z-index: 99999999;
            background-image: url('../Images/Loading.gif');
            /*background-image: url('../logo/atlas_small.png');*/ /* your icon gif file path */
            background-repeat: no-repeat;
            background-color: #FFF;
            background-position: center;
            /*animation: animate 10s linear infinite;*/
        }

        [class*=sidebar-light-] {
            background-color: #fff;
        }

        .sidebar-dark-primary .nav-sidebar > .nav-item > .nav-link.active, .sidebar-light-primary .nav-sidebar > .nav-item > .nav-link.active {
            background-color: #007bff;
            color: #fff;
        }

        i, span {
            display: inline-block;
        }
        .spnCustomV2 {
            color: #827777;
            font-size: 10px;
            font-weight: 400;
        }

        .online_animation {
            width: 12px;
            height: 12px;
            background: #00ff94;
            border-radius: 100%;
            margin-top: 0;
            position: relative;
            top: 1px;
            -webkit-animation: online 2s infinite;
            /* Safari 4.0 - 8.0 */
            animation: online 2s infinite;
        }

        /*[class*=sidebar-light-] .nav-treeview > .nav-item > .nav-link:hover{
            padding-left: 20px;
        }*/


        /*.fas fa-angle-right:hover {
            padding-left: 30px;
        }*/

    </style>
    @*layout-footer-fixed*@
</head>
<body class="sidebar-mini layout-fixed layout-navbar-fixed layout-footer-fixed">
     @{ var Account = Context.Session.GetString("accounttype");
        var BranchName = Context.Session.GetString("branchname");
        var BranchId = Context.Session.GetString("sysbranchuuid");
    }
    <div class="preloader"></div>
    <!-- Site wrapper -->
    <div class="wrapper">
        <!-- Navbar -->
        <nav class="main-header navbar navbar-expand navbar-light navbar-light">
            <!-- Left navbar links -->
            <!-- navbar light-->
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" data-widget="pushmenu" href="#" role="button" style="color: gray"><i class="fas fa-bars"></i></a>
                </li>
                <li class="nav-item d-none d-sm-inline-block">
                    <span class="nav-link" style="font-weight:500">Digital Management</span>
                </li>
                <li class="nav-item d-none d-sm-inline-block">
                    <span class="nav-link"><b> @Context.Session.GetString("branchname") </b></span>
                </li>
            </ul>  
            
        </nav>
        <!-- /.navbar -- >

        <!-- Main Sidebar Container -->
        <aside class="main-sidebar elevation-4 sidebar-dark-primary">
            <!-- Brand Logo -->
            <a href="#" class="brand-link">

                @*<img src="/Images/kyte final small.png" alt="AdminLTE Logo" class="brand-image" style="opacity: .8">*@
                <img src="#" alt="" class="brand-image" style="opacity: .8; margin-left:14%">
                <h5 class="brand-text" style="color:#000; text-align: left;"> <span class="spnCustomV2"></span></h5>
            
            </a>

            <!-- Sidebar -->
            <div class="sidebar">
                <!-- Sidebar user (optional) -->

                <div class="user-panel mt-3 pb-3 mb-3 d-flex">
                    <div class="image">
                        <img src="/Images/user48.png" class="img-circle" alt="User Image">
                    </div>
                    <div class="info">
                        <a href="#" class="d-block" @*style="color: #fd7e14;"*@><b> @Context.Session.GetString("accounttype") </b></a>
                        @*<span>Online</span>*@
                    </div>
                    
                </div>
                 
                <!-- SidebarSearch Form -->
                @*<div class="form-inline">
                    <div class="input-group" data-widget="sidebar-search">
                        <input class="form-control form-control-sidebar" type="search" placeholder="Search" aria-label="Search">
                        <div class="input-group-append">
                            <button class="btn btn-sidebar">
                                <i class="fas fa-search fa-fw"></i>
                            </button>
                        </div>
                    </div>
                </div>*@

                <!-- Sidebar Menu -->
                <nav class="mt-2">
                    <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
                        <!-- Add icons to the links using the .nav-icon class
                             with font-awesome or any other icon font library -->
                        <li class="nav-item menu-open" id="liDashboard">
                            <a href="#" class="nav-link" id="aDashboard">
                                <i class="nav-icon fas fa-home"></i>
                                <p>
                                    Home
                                    <i class="right fas fa-angle-left"></i>
                                </p>
                            </a>
                            <ul class="nav nav-treeview">
                                <li class="nav-item">
                                    <a href="/Visitor/VisitorMaster" class="nav-link" id="aVisitorMaster">
                                        <i class="far fa-circle nav-icon"></i>
                                        <p>Visitor</p>
                                    </a>
                                </li>

                            </ul>

                            <ul class="nav nav-treeview">
                                <li class="nav-item">
                                    <a href="/ExisitingVisitor/ExisitingVisitorMaster" class="nav-link" id="aExistingVisitorMaster">
                                        <i class="far fa-circle nav-icon"></i>
                                        <p>Existing Visitor</p>
                                    </a>
                                </li>

                            </ul>
                            
                            <ul class="nav nav-treeview">
                                <li class="nav-item">
                                    <a href="/Dashboard/VisitorDashboard" class="nav-link" id="aDashMaster">
                                        <i class="far fa-circle nav-icon"></i>
                                        <p>Visitor List</p>
                                    </a>
                                </li>

                            </ul>
                            
                        </li>


                        <li class="nav-item menu-open" id="liReport">
                            <a href="#" class="nav-link" id="aReport">
                                <i class="nav-icon fas fa-copy"></i>
                                <p>
                                    Reports
                                    <i class="right fas fa-angle-left"></i>
                                </p>
                            </a>
                            <ul class="nav nav-treeview">
                                <li class="nav-item">
                                    <a href="#" class="nav-link" id="">
                                        <i class="far fa-circle nav-icon"></i>
                                        <p>Visitor Report</p>
                                    </a>
                                </li>

                            </ul>

                        </li>
                        <li class="nav-item menu-open" id="liMaster">
                            <a href="#" class="nav-link" id="aMaster">
                                <i class="nav-icon fas fa-user"></i>
                                <p>
                                    Settings
                                    <i class="right fas fa-angle-left"></i>
                                </p>
                            </a>
                            @if (Account.Contains("Admin"))
                            {
                                <ul class="nav nav-treeview">
                                    <li class="nav-item">
                                        <a href="/MasterBranch/MasterBranch" class="nav-link" id="aBranchMaster">
                                            <i class="far fa-circle nav-icon"></i>
                                            <p>Master Branch</p>
                                        </a>
                                    </li>

                                </ul>
                            }
                            <ul class="nav nav-treeview">
                                <li class="nav-item">
                                    <a href="/Employee/EmployeeMaster" class="nav-link" id="aEmpMaster">
                                        <i class="far fa-circle nav-icon"></i>
                                        <p>Master Employee</p>
                                    </a>
                                </li>

                            </ul>
                            <ul class="nav nav-treeview">
                                <li class="nav-item">
                                    <a href="/Department/DepartmentMaster" class="nav-link" id="aDepartmentMaster">
                                        <i class="far fa-circle nav-icon"></i>
                                        <p>Master Department</p>
                                    </a>
                                </li>

                            </ul>
                            <ul class="nav nav-treeview">
                                <li class="nav-item">
                                    <a href="/Masterpurpose/MasterVisitingPurpose" class="nav-link" id="aPurposeMaster">
                                        <i class="far fa-circle nav-icon"></i>
                                        <p> Master Purpose</p>
                                    </a>
                                </li>

                            </ul>
                            <ul class="nav nav-treeview">
                                <li class="nav-item">
                                    <a href="/IdProof/MasterIdProof" class="nav-link" id="aIdProofMaster">
                                        <i class="far fa-circle nav-icon"></i>
                                        <p>Master IdProof</p>
                                    </a>
                                </li>

                            </ul>
                            <ul class="nav nav-treeview">
                                <li class="nav-item">
                                    <a href="/VisitorCard/VisitorCardMaster" class="nav-link" id="aVCardMaster">
                                        <i class="far fa-circle nav-icon"></i>
                                        <p>Master VisitorCard</p>
                                    </a>
                                </li>

                            </ul>
                            
                        </li>
                        <li class="nav-item">
                            <a href="/login/Logout" class="nav-link">
                                <i class="nav-icon  fa fa-sign-out-alt"></i>
                                <p>Logout</p>
                            </a>
                        </li>

                    </ul>
                </nav>
                <!-- /.sidebar-menu -->
            </div>
            <!-- /.sidebar -->
        </aside>

        <!-- Content Wrapper. Contains page content -->
        <div class="content-wrapper">
            <!-- Content Header (Page header) -->
            @*<section class="content-header">*@
            <div class="container-flex">
                @RenderBody()

            </div><!-- /.container-fluid -->
            @*</section>*@


            <footer class="main-footer">
                @*<div class="container">
                &copy; 2022 - EmployeeTracking
                </div>*@
                <span style="font-size:14px">Powered by <a href="https://laayn.com/" target="_blank" style="color:#fd7e14"><b>Laayn Technologies Pvt. Ltd.</b></a>All rights reserved.</span>

                <div class="float-right d-none d-sm-inline-block">
                    <span style="font-size:14px">Version 1.1.0</span>
                </div>

            </footer>

            @RenderSection("Scripts", required: false)
            <!-- /.content -->
        </div>
        <!-- /.content-wrapper -->
        <!-- Control Sidebar -->
        <aside class="control-sidebar control-sidebar-dark">
            <!-- Control sidebar content goes here -->
        </aside>
        <!-- /.control-sidebar -->
    </div>
    <!-- ./wrapper -->
    <!-- jQuery -->

    <script src="~/plugins/jquery/jquery.min.js"></script>
    @*<script src="~/plugins/bootstrap/js/bootstrap.js"></script>*@
    <script src="~/plugins/bootstrap/js/bootstrap.bundle.js"></script>

    <script src="~/dist/js/adminlte.js"></script>
    @*<script src="~/js/bootstrap-multiselect.js"></script>*@

    <script src="~/plugins/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/plugins/chart.js/Chart.min.js"></script>
    <script src="~/plugins/moment/moment.min.js"></script>
    <script src="~/plugins/daterangepicker/daterangepicker.js"></script>
    <script src="~/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.js"></script>
    <script src="~/plugins/bs-stepper/js/bs-stepper.js"></script>

    <script src="~/plugins/jquery-validation/jquery.validate.js"></script>
    <script src="~/plugins/bs-custom-file-input/bs-custom-file-input.js"></script>
    @*<script src="~/plugins/select2/js/select2.full.min.js"></script>*@
    <script src="~/plugins/jquery-ui/jquery-ui.js"></script>
    <script src="~/plugins/jquery-ui/jquery-ui-timepicker-addon.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
    <script src="~/plugins/overlayScrollbars/js/jquery.overlayScrollbars.min.js"></script>
    <script src="~/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="~/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="~/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.bootstrap4.js"></script>
    <script src="~/plugins/jszip/jszip.min.js"></script>
    <script src="~/plugins/pdfmake/pdfmake.min.js"></script>
    <script src="~/plugins/pdfmake/vfs_fonts.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.colVis.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="~/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>


    <script src="~/plugins/jquery-knob/jquery.knob.min.js"></script>

    @*<script src="~/plugins/popper/popper.js"></script>*@
    <script src="~/js/bootstrap-multiselect.js"></script>
    @*<script src="~/Js/photoviewer.js"></script>*@
    @*<script src="~/js/adminlte.min.js"></script>*@

    <!-- AdminLTE for demo purposes -->

   <script>
        $(function() {
            $("#example1").DataTable({
                "responsive": true, "lengthChange": true, "autoWidth": false,
                "aaSorting": [],
                "lengthMenu": [[10, 20, 50, 100, -1], [10, 20, 50, 100, "All"]],
                //dom: 'l<".col-md-4" B>frtip',
                 "oLanguage": {
                    "sEmptyTable": "No Data"
                },
                "buttons": ["copy", "csv", "excel", "print", "pdf"]// "pdf",

            }).buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');

            $("#example12").DataTable({
                "responsive": true, "lengthChange": true, "autoWidth": false,
                "aaSorting": [],
                "lengthMenu": [[10, 20, 50, 100, -1], [10, 20, 50, 100, "All"]],
                //dom: 'l<".col-md-4" B>frtip',
                 "oLanguage": {
                    "sEmptyTable": "Please select filters to get report"
                },
                "buttons": ["copy", "csv", "excel", "print", "pdf"]// "pdf",

            }).buttons().container().appendTo('#example12_wrapper .col-md-6:eq(0)');

            //$(".dt-buttons").addClass('col-md-4').css('text-align', 'left !important');
            //$(".dataTables_length").addClass('col-md-4').css('text-align', 'right !important');
            //$("#example1_wrapper").addClass('col-md-4');
            //$(".dt-buttons").addClass('col-sm-4').css('text-align', 'left !important');;
            //$("#example1_wrapper").css('margin-top', '1%').css('padding-left', '15px').css('text-align', 'left !important');
            //$(".dt-buttons").addClass('clsCenter');
            //$(".dt-button").css('background', 'white !important').css('border', '1px solid #dcdcdc !important');

            $('#example2').DataTable({
                "paging": true,
                "lengthChange": false,
                "searching": false,
                "ordering": false,
                "info": false,
                "autoWidth": false,
                "responsive": true,
                "lengthMenu": [[10, 20, 50, 100, -1], [10, 20, 50, 100, "All"]],
                //"bInfo" : false
            });
            $('#example3').DataTable({
                'autoWidth': false,
                "paging": true,
                "aaSorting": [],
                "lengthMenu": [[10, 20, 50, 100, -1], [10, 20, 50, 100, "All"]],
                
                //"paging": true,
                //"lengthChange": false,
                //"searching": true,
                //"ordering": false,
                //"info": true,
                //"autoWidth": false,
                //"responsive": true,
                //"lengthMenu": [[10, 20, 50, 100, -1], [10, 20, 50, 100, "All"]],
            });
            $('#example5').DataTable({
                "paging": true,
                "lengthChange": false,
                "searching": true,
                "ordering": false,
                "info": true,
                "autoWidth": false,
                "responsive": true,
                "lengthMenu": [[6, 20, 50, 100, -1], [6, 20, 50, 100, "All"]],
            });
            $('#dataTable').DataTable();


        });

        

        function preloaderFadeOutInit() {
            $('.preloader').fadeOut('slow');
            //$('body').attr('.hold-transition', '');
        }
        // Window load function
        jQuery(window).on('load', function() {
            (function($) {
                preloaderFadeOutInit();
            })(jQuery);
        });


   </script>

</body>
</html>


18.AddVisitorMaster-

@model Digital_Management.Models.Cls_Visitor
<link href="~/css/bootstrap-multiselect.css" rel="stylesheet" />

@{
    ViewData["Title"] = "AddVisitorMaster";
    Layout = null;
}

<div class="panel panel-info">
    <div class="panel-heading"></div>
    <div class="panel-body">

        <div class="row">
            @*<div class="col-md-4">
            <div class="form-group">
            <label for="Name">videouudid</label><label style="color:red">*</label>
            @Html.TextBoxFor(model => model.videouudid, new { @class = "form-control", required = "required" })
            </div>
            </div>*@
            <div class="col-md-12">
                <div class="row">
                    @*<div class="col-md-4">
                        <div class="form-group">
                            <label for="Visitor_id">Visitor Id </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Visitor_id, new { @class = "form-control", required = "required", placeholder = "Enter Visitor_id " })
                            @Html.ValidationMessageFor(model => model.Visitor_id, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="FirstName">First Name </label><label style="color:red">*</label>*@
                            @Html.TextBoxFor(model => model.Firstname, new { @class = "form-control", required = "required", placeholder = "Enter FirstName " })
                            <span id="nameerror" asp-validation-for="Firstname" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="LastName">Last Name </label><label style="color:red">*</label>*@
                            @Html.TextBoxFor(model => model.Lastname, new { @class = "form-control", required = "required", placeholder = "Enter LastName " })
                            <span id="nameerror1" asp-validation-for="Lastname" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="No_Of_Visitor">No.Of Visitor </label><label style="color:red">*</label>*@
                            @Html.TextBoxFor(model => model.No_Of_Visitor, new { @class = "form-control", required = "required", placeholder = "Enter No.Of Visitor " })
                            <span id="nameerror1" asp-validation-for="No_Of_Visitor" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="Company_name">Company Name</label><label style="color:red">*</label>*@
                            @Html.TextBoxFor(model => model.Company_name, new { @class = "form-control", required = "required", placeholder = "Enter Company Name " })
                            <span id="nameerror1" asp-validation-for="Company_name" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group" id="valemail">
                            @*<label for="EmailId">Email Id </label>*@
                            @*<input type="email" class = "form-control" id="EmailId" required = "required" placeholder = "Enter EmailId ">*@
                            @Html.TextBoxFor(model => model.Emailid, new { @class = "form-control", type="email", placeholder = "Enter EmailId "})
                            <span id="error" asp-validation-for="Emailid" class="text-danger"></span>
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="Phone">Phone </label><label style="color:red">*</label>*@
                            @Html.TextBoxFor(model => model.Phone, new { placeholder = "Enter Phone", @class = "form-control", required = "required"})
                        </div>
                    </div>
                    
                    
                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="Address">Address </label><label style="color:red">*</label>*@
                            @Html.TextBoxFor(model => model.Address, new { @class = "form-control", required = "required", placeholder = "Enter Address " })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="selVisitingId">PurposeOfVisit </label><label style="color:red">*</label>*@
                            @Html.DropDownListFor(model => model.selVisitingId, new SelectList(Model.VisitingPurposeDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.selVisitingId), "Select PurposeOfVisit", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selVisitingId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="Id_proofDDL">Id Proof </label><label style="color:red">*</label>*@
                            @Html.DropDownListFor(model => model.selIdproofId, new SelectList(Model.Id_proofDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.Id_proofDDL), "Select Id Proof", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selIdproofId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="selDepartmentId">Department </label><label style="color:red">*</label>*@
                            @Html.DropDownListFor(model => model.selDepartmentId, new SelectList(Model.DepartmentDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.selDepartmentId), "Select Department", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selDepartmentId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="EmployeeDDL">Whom To Meet </label><label style="color:red">*</label>*@
                            @Html.DropDownListFor(model => model.selEmployeeId, new SelectList(Model.EmployeeDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.EmployeeDDL), "Whom To Meet", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selEmployeeId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="VCardDDL">Visitor's Card No. </label><label style="color:red">*</label>*@
                            @Html.ListBoxFor(model => model.selVCardId, new SelectList(Model.VCardDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.selVCardId), new { @class = "boot-multiselect-demo  form-control", required = "required"})

                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selVCardId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                   @* <div class="form-group row">
                        @Html.LabelFor(model => model.selVCardId, new { @class = "col-sm-2 col-form-label" })
                        <div class="col-sm-6">
                            @Html.ListBoxFor(model => model.selVCardId,new MultiSelectList(Model.VCardDDL, "Value", "Text"), new { @class = "form-control", multiple = "multiple", id = "Subjects_dropdown" })
                        </div>  
                    </div>  *@

                    <div class="col-md-4">
                        <div class="form-group">
                            @*<label for="AccessoriesDDL">Accessories </label><label style="color:red">*</label>*@
                            @Html.DropDownListFor(model => model.selAccessoriesId, new SelectList(Model.AccessoriesDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.AccessoriesDDL), "Select Accessories", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.selAccessoriesId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div>
                        <video id="video" width="200" height="180" autoplay></video>
                        <button type="button" id="capture" class="btn btn-primary">Capture</button>

                    </div>
                    <canvas id="canvas" width="200" height="180"></canvas>

                    <input type="hidden" name="Photo" id="Photo"  value=""   />

                    @*<div class="col-md-4">
                        <div class="form-group">
                            <label for="ProfilePhoto"> Photo </label>
                            <input type="file" name="postedFile" class="btn btn-sm btn-primary" style="width:100%" />
                        </div>
                    </div>*@
                   
                </div>
            </div>

            <div class="col-md-3" style="margin-top:4%">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-primary" name="Save" value="Save" onclick="myFunction()"> Submit </button>

                    <button type="reset" class="btn btn-danger" id="btn_close"> Reset </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/Js/jquery-ui.js"></script>
<script src="~/Js/bootstrap-multiselect.js"></script>


<script>
    $(document).ready(function () {


        $('#selVCardId').multiselect({
            nonSelectedText: 'Select VisitorCard',
            includeSelectAllOption: true,
            buttonWidth: 245,
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true,
            numberDisplayed: 5
        });
        //$("i").removeClass('glyphicon glyphicon-search').addClass('fa fa-search');
    });


    var video = document.getElementById('video');
    var canvas = document.getElementById('canvas');
    var context = canvas.getContext('2d');

    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ video: true }).then(function (stream) {
            video.srcObject = stream;
            video.play();
        });
    }

    document.getElementById('capture').addEventListener('click', function () {
        context.drawImage(video, 0, 0, 200, 180);
        var imageData = canvas.toDataURL();
        document.getElementById('Photo').value = imageData;
    });


</script>  

18.UpdateVisitorMaster-

@model Digital_Management.Models.Cls_Visitor

@{
    ViewData["Title"] = "UpdateVisitorMaster";
    Layout = null;
}

<div class="panel panel-info">
    <div class="panel-heading"></div>
    <div class="panel-body">

        <div class="row">
            
            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-4" hidden="hidden">
                        <div class="form-group">
                        <label for="Visitor_id">Visitor Id </label><label style="color:red">*</label>
                        @Html.TextBoxFor(model => model.Visitor_id, new { @class = "form-control", required = "required", placeholder = "Enter Visitor_id " ,@readonly = "readonly"})
                        @Html.ValidationMessageFor(model => model.Visitor_id, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="FirstName">First Name </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Firstname, new { @class = "form-control", required = "required", placeholder = "Enter FirstName " })
                            <span id="nameerror" asp-validation-for="Firstname" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="LastName">Last Name </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Lastname, new { @class = "form-control", required = "required", placeholder = "Enter LastName " })
                            <span id="nameerror1" asp-validation-for="Lastname" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="No_Of_Visitor">No.Of Visitor </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.No_Of_Visitor, new { @class = "form-control", required = "required", placeholder = "Enter No.Of Visitor " })
                            <span id="nameerror1" asp-validation-for="No_Of_Visitor" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Phone">Phone </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Phone, new { placeholder = "Enter Phone", @class = "form-control", required = "required"})
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Address">Address </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Address, new { @class = "form-control", required = "required", placeholder = "Enter Address " })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Company_name">Company Name</label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Company_name, new { @class = "form-control", required = "required", placeholder = "Enter Company Name " })
                            <span id="nameerror1" asp-validation-for="Company_name" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group" id="valemail">
                            <label for="EmailId">Email Id </label>
                            @*<input type="email" class = "form-control" id="EmailId" required = "required" placeholder = "Enter EmailId ">*@
                            @Html.TextBoxFor(model => model.Emailid, new { @class = "form-control", type="email", placeholder = "Enter EmailId "})
                            <span id="error" asp-validation-for="Emailid" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="PurposeOfVisit">PurposeOfVisit </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.PurposeOfVisit, new SelectList(Model.VisitingPurposeDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.PurposeOfVisit), "Select PurposeOfVisit", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.PurposeOfVisit, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Id_proof">Id Proof </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.Id_proof, new SelectList(Model.Id_proofDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.Id_proof), "Select Id Proof", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.Id_proof, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Department">Department </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.Department, new SelectList(Model.DepartmentDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.Department), "Select Department", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="whom_to_meet">Whom To Meet </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.whom_to_meet, new SelectList(Model.EmployeeDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.whom_to_meet), "Whom To Meet", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.whom_to_meet, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="VisitorCardNo">Visitor's Card No. </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.VisitorCardNo, new SelectList(Model.VCardDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.VisitorCardNo), "Select Visitor Card", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.VisitorCardNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="Accessories">Accessories </label><label style="color:red">*</label>
                            @Html.DropDownListFor(model => model.Accessories, new SelectList(Model.AccessoriesDDL.Select(x => new { Value = x.Value, Text = x.Text }), "Value", "Text", Model.Accessories), "Select Accessories", new { @class = "form-control", required="required" })
                            @*@Html.TextBoxFor(model => model.selDepartmentId, new { @class = "form-control", required = "required", placeholder = "Enter Department " })*@
                            @Html.ValidationMessageFor(model => model.Accessories, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="ProfilePhoto"> Photo </label>
                            <input type="file" name="postedFile" class="btn btn-sm btn-primary" style="width:100%" />
                        </div>
                    </div>
                    
                </div>
            </div>

            <div class="col-md-3" style="margin-top:4%">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-primary" name="Update" value="Update" onclick="myFunction()"> Update</button>
                    <button type="reset" class="btn btn-danger" id="btn_close"> Reset</button>
                </div>
            </div>

        </div>
    </div>
</div>

19.UpdateVisitorTime-

@model Digital_Management.Models.Cls_Visitor

@{
    ViewData["Title"] = "UpdateVisitorTime";
    Layout = null;
}



@*<form onsubmit="submitForm(); return false;">
    <button type="submit">Confirm</button>
</form>*@


@*<div class="panel panel-info">
    <div class="panel-heading"></div>
    <div class="panel-body">

        <div class="row">

            <div class="col-md-12">
                <div class="row">

                    <div class="col-md-3" style="margin-top:4%">
                        <div class="form-group" id="btn_Email">
                            <button type="submit" class="btn btn-primary" name="Confirm" value="Confirm" onclick="myFunction()"> Confirm </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
*@

<div class="panel panel-info">
    <div class="panel-heading"></div>
    <div class="panel-body">

        <div class="row">

            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group" >
                            <label for="Visitor_id" >Visitor Id </label><label style="color:red" >*</label>
                            @Html.TextBoxFor(model => model.Visitor_id,new { @class = "form-control", required = "required", placeholder = "Enter EmpId ", @readonly= "readonly" })
                            @Html.ValidationMessageFor(model => model.Visitor_id, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="FirstName">First Name </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Firstname, new { @class = "form-control", required = "required", placeholder = "Enter FirstName ", @readonly= "readonly" })
                            <span id="nameerror" asp-validation-for="Firstname" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="LastName">Last Name </label><label style="color:red">*</label>
                            @Html.TextBoxFor(model => model.Lastname, new { @class = "form-control", required = "required", placeholder = "Enter LastName ", @readonly= "readonly" })
                            <span id="nameerror1" asp-validation-for="Lastname" class="text-danger"></span>
                        </div>
                    </div>

                    @*<div class="col-md-3">
                        <div class="form-group">
                            <label for="Photo">Image </label><label style="color:red">*</label>
                            <img src="@Html.DisplayFor(model => model.Photo, new { @class = "form-control", required = "required", placeholder = "Enter LastName ", @readonly= "readonly" }) alt="" height="50" width="50" style="border-radius: 50%; border:2px solid #424949 ;" />
                            <span id="nameerror1" asp-validation-for="Photo" class="text-danger"></span>
                        </div>
                    </div>*@
                   
                </div>
            </div>

            <div class="col-md-3" style="margin-top:4%">
                <div class="form-group" id="btn_Email">
                    <button type="submit" class="btn btn-primary" name="Confirm" value="Confirm" onclick="myFunction()"> Confirm </button>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="~/Js/jquery-ui.js"></script>
<script src="~/Js/bootstrap-multiselect.js"></script>

<script>

    $(document).ready(function () {


        $('#selEmployeeId').multiselect({
            nonSelectedText: 'Select Employees',
            includeSelectAllOption: true,
            buttonWidth: 245,
            enableFiltering: true,
            enableCaseInsensitiveFiltering: true,
            numberDisplayed: 5
        });
        //$("i").removeClass('glyphicon glyphicon-search').addClass('fa fa-search');
    });

</script>

20-VisitorMaster-

@model Digital_Management.Models.Cls_Visitor

@{
    ViewData["Title"] = "VisitorMaster";
}

<style>
    .marginBottom {
        margin-bottom: 4px !important;
    }

    .spnCustom {
        color: #827777;
        font-size: 12px;
    }

    .alert {
        /*color: #fff;*/
        background-color: #ffc107;
        /*border-color: #0059FF;*/
        padding: 20px 40px;
        min-width: 420px;
        right: 0px;
        top: 0.5px;
        position: absolute;
        border-radius: 5px;
        border-left: 8px solid #ffa502;
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />


<div class="content-header">
    @*<div class="container-fluid">*@
    <div class="row mb-2">
        <div class="col-sm-6">
            <h1 class="m-0">Home <span class="spnCustom">VisitorList</span></h1>
        </div><!-- /.col -->
        <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
                <li class="breadcrumb-item"><a href="#">VisitorList</a></li>
                <li class="breadcrumb-item active">Home</li>
            </ol>
        </div>
    </div>
    @*</div>*@
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    // var Permission = Context.Session.GetString("Permission");

    @if (@ViewBag.Message != null)
    {

        <div class="alert" id="divMsg">
            <span class="msg" style="color:white; font-size: 18px; padding: 0 20px; font-weight: bold;">@ViewBag.Message</span>
                    
        </div>

    }

    <div class="row">
        <div class="col-md-4">
            <div class="info-box">
                <span class="info-box-icon bg-warning"><i class="fa-solid fa-users" style="color:white"></i></span>

                <div class="info-box-content">
                    <a href="#" title="Total Visitor" id="btn_total" style="color: #000">
                    <span class="info-box-text">Total Visitor</span>
                        <span class="info-box-number"><b> @Html.Raw(Model.TotalCount) </b></span>
                    </a>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="info-box">
                <span class="info-box-icon bg-success"><i class="fa fa-solid fa-right-to-bracket" style="color:white"></i></span>

                <div class="info-box-content">
                    <a href="#" title="In" id="btn_running" style="color: #000">
                    <span class="info-box-text"> In </span>
                        <span class="info-box-number">@*@Html.Raw(Model.TotalRFI)*@ <b> @Html.Raw(Model.PresentCount) </b> </span>
                    </a>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="info-box">
                <span class="info-box-icon bg-danger"><i class="fa fa-solid fa-right-from-bracket" style="color:white"></i></span>

                <div class="info-box-content">
                    <a href="#" title="Out" id="btn_idle" style="color: #000">
                    <span class="info-box-text"> Out </span>
                        <span class="info-box-number"><b> @Html.Raw(Model.OutCount) </b></span>
                    </a>
                </div>
            </div>
        </div>


        
        
    </div>

    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Visitor List</h3>
                @*<input type="file" name="postedFile" class="btn btn-default" />
            <input type="submit" class="btn btn-warning" value="Upload" name="Upload" id="btnSubmit" />*@
                <a href="#" id="btn_add" title="Add Visitor" class="btn btn-sm btn-info text-white" style="float:right"><i class="fa fa-plus-circle"></i> Add</a>

            </div>
            <div class="card-body">
                <table id="example1" class="table table-bordered table-striped">
                    <thead class="mytableheader">
                        <tr>

                           @* <th>Visitor_Id</th>*@
                            <th>Card#</th>
                            <th>Photo</th>
                            <th>InTime</th>
                            <th>OutTime</th>
                            <th>Total Hrs.</th>
                            <th>VisitorName</th>
                            @*<th>Email Id</th>
                            <th>phone</th>*@
                            @*<th>Accessories</th>
                            <th>Id_Proof</th>*@
                            <th>Dept.</th>
                            <th>MeetingWith</th>
                            <th>Action</th>
                            <th>CompanyName</th>
                            <th>Address</th>
                            <th>Purpose</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model._List != null && Model._List.Count > 0)
                        {
                            foreach (var item in Model._List)
                            {
                                <tr>

                                    @*<td>@Html.DisplayFor(modelItem => item.Visitor_id)</td>*@
                                    <td>@Html.DisplayFor(modelItem => item.VisitorCardNo)</td>
                                    <td><img src="@Html.DisplayFor(modelitem => item.Photo)" alt="" height="50" width="50" style="border-radius: 50%; border:2px solid #424949 ;" /></td>
                                    <td>@Html.DisplayFor(modelItem => item.Entry_time)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Exit_time)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Total_hrs)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Firstname)</td>
                                    @*<td>@Html.DisplayFor(modelItem => item.Lastname)</td>*@
                                    @*<td>@Html.DisplayFor(modelItem => item.Emailid)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Phone)</td>*@
                                    @*<td>@Html.DisplayFor(modelItem => item.Accessories)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Id_proof)</td>*@
                                    <td>@Html.DisplayFor(modelItem => item.Department)</td>
                                    <td>@Html.DisplayFor(modelItem => item.whom_to_meet)</td>
                                    
                                    
                                    <td>
                                        <button type="button" title="Click To Edit" onclick='javascript: displayPopup("@Url.Content(item.Visitor_id.ToString())");' class="btn btn-round btn btn-success fa fa-edit"></button>
                                        <button type="button" title="Click To Exit" onclick='javascript: displayPopupForExit("@Url.Content(item.Visitor_id.ToString())");' class="btn btn-round btn btn-success fa fa-sign-out"></button>
                                    </td>
                                    <td>@Html.DisplayFor(modelItem => item.Company_name)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Address)</td>
                                    <td>@Html.DisplayFor(modelItem => item.PurposeOfVisit)</td>
                                    
                                </tr> 
                            }
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>


    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
                
            </div>
        </div>
    </div>

    <div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
                
            </div>
        </div>
    </div>

}

<script src="~/plugins/jquery/jquery.js"></script>
<script src="~/plugins/datatables/jquery.dataTables.min.js"></script>


<script>
    setTimeout(function () {
        $('#divMsg').fadeOut('fast');
    }, 3000);
    $(document).ready(function () {
        $('a').removeClass('active');
        $('li').removeClass('menu-open');
        $("#liDashboard").addClass('menu-open');
        $("#aDashboard").addClass('active');
        $("#aVisitorMaster").addClass('active');
        
        $('#custom-tabs-three-home-tab').addClass('active');

    });

    //var table = $("#example20").DataTable({
    //    "responsive": true, "lengthChange": true, "autoWidth": false,
    //    "aaSorting": [],
    //    "lengthMenu": [[10, 20, 50, 100, -1], [10, 20, 50, 100, "All"]],
    //    //dom: 'l<".col-md-4" B>frtip',
    //    "oLanguage": {
    //        "sEmptyTable": "No Data"
    //    },
    //    "buttons": ["copy", "csv", "excel", "print", "pdf"]// "pdf",

    //}).buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');

    //$('#btn_total').click(function () {
    //    table.search('').draw();
    //});
    //$('#btn_running').click(function () {
    //    table.search('In').draw();
    //});
    //$('#btn_idle').click(function () {
    //    table.search('Out').draw();
    //});
    
    $('#btn_add').click(function () {
        $('#modalHeader').text('Add Visitor');
        $.ajax({
            url: "/Visitor/AddVisitorMaster",
            type: "Get",
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (result) {
                //console.log(result);
                $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                $('#AddList').empty();
                $('#AddList').append(result);
                $('#MapPopup').modal('show');
            },
            failure: function (result) {
                alert('Fail To Load data');
            },
            error: function (result) {
            }
        });
    });

    

    function displayPopup(accId) {
        $('#modalHeader').text('Edit Visitor');
        if (accId != "") {
            console.log(accId);
            $.ajax({
                url: "/Visitor/UpdateVisitorMaster",
                type: "get",
                contentType: "application/json",
                data: { "Visitor_id": accId },
                datatype: "json",
                success: function (result) {
                    $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                    $('#AddList').empty();
                    $('#AddList').append(result);
                    $('#MapPopup').modal('show');
                },
                error: function (result) {
                    alert('Failed to update visitor exit time.');
                }
            });
        }
    }

    

    function displayPopupForExit(accId) {
        $('#modalHeader').text('Exit Visitor');
        if(accId != ""){
            console.log(accId);
            $.ajax({
                url: "/Visitor/UpdateVisitorTime",
                type: "get",
                contentType: "application/json",
                data: { "Visitor_id": accId },
                datatype: "json",
                success: function (result) {
                     
                        $('#MapPopup .modal-body').html(result);
                        $('#MapPopup').modal({ backdrop: 'static', keyboard: false });
                },
                error: function (result) {
                    alert('Failed to update visitor exit time.');
                }
            });
        }
    }

    

</script>
21.AddVisitorCardMaster-

@model Digital_Management.Models.Cls_VisitorCard

@{
    ViewData["Title"] = "AddVisitorCardMaster";
    Layout = null;
}


<div class="row">
    <div class="col-md-12">
        <div class="form-group">
            <label for="VisitorCardNo">@Html.LabelFor(model => model.VisitorCardNo)</label><label style="color:red">*</label>
            @Html.TextBoxFor(model => model.VisitorCardNo, new { @class = "form-control", placeholder = "Enter VisitorNo." })
            @Html.ValidationMessageFor(model => model.VisitorCardNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="col-md-6" style="margin-top:4%">
        <div class="form-group">
            <button type="submit" class="btn btn-info" name="Save" value="Save">Save</button>
            <button type="reset" class="btn btn-secondary">Reset</button>
        </div>
    </div>
</div>

22.VisitorCardMaster-

@model Digital_Management.Models.Cls_VisitorCard

@{
    ViewData["Title"] = "VisitorCardMaster";
}

<style>
    .marginBottom {
        margin-bottom: 4px !important;
    }

    .spnCustom {
        color: #827777;
        font-size: 12px;
    }

    .alert {
        /*color: #fff;*/
        background-color: #ffc107;
        /*border-color: #0059FF;*/
        padding: 20px 40px;
        min-width: 420px;
        right: 0px;
        top: 0.5px;
        position: absolute;
        border-radius: 5px;
        border-left: 8px solid #ffa502;
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css" integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link href="~/plugins/fontawesome-free/css/all.css" rel="stylesheet" />
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<div class="content-header">
    @*<div class="container-fluid">*@
    <div class="row mb-2">
        <div class="col-sm-6">
            <h1 class="m-0">Settings <span class="spnCustom">VisitorCardList</span></h1>
        </div><!-- /.col -->
        <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
                <li class="breadcrumb-item"><a href="#">VisitorCardList</a></li>
                <li class="breadcrumb-item active">Settings</li>
            </ol>
        </div>
    </div>
    @*</div>*@
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    // var Permission = Context.Session.GetString("Permission");

    @if (@ViewBag.Message != null)
    {

        <div class="alert" id="divMsg">
            <span class="msg" style="color:white; font-size: 18px; padding: 0 20px; font-weight: bold;">@ViewBag.Message</span>

        </div>

    }

    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Visitor List</h3>
                @*<input type="file" name="postedFile" class="btn btn-default" />
            <input type="submit" class="btn btn-warning" value="Upload" name="Upload" id="btnSubmit" />*@
                <a href="#" id="btn_add" title="Add Visitor" class="btn btn-sm btn-info text-white" style="float:right"><i class="fa fa-plus-circle"></i> Add</a>

            </div>
            <div class="card-body">
                <table id="example1" class="table table-bordered table-striped">
                    <thead class="mytableheader">
                        <tr>

                            @* <th>Visitor_Id</th>*@
                            <th>Card#</th>
                            <th>PostedBy</th>
                            <th>Posted DateTime</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model._List != null && Model._List.Count > 0)
                        {
                            foreach (var item in Model._List)
                            {
                                <tr>

                                    <td>@Html.DisplayFor(modelItem => item.VisitorCardNo)</td>
                                    <td>@Html.DisplayFor(modelItem => item.PostedBy)</td>
                                    <td>@Html.DisplayFor(modelItem => item.PostedDateTime)</td>

                                </tr>
                            }
                        }
                    </tbody>

                </table>
            </div>
        </div>
    </div>


    @*<div class="modal fade bs-example-modal-sm" id="MapPopup" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
            </div>
        </div>
    </div>*@

    <div class="modal fade bs-example-modal-sm" id="MapPopup">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="modalHeader"></h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="AddList">
                </div>
            </div>
        </div>
    </div>

}


<script src="~/plugins/jquery/jquery.js"></script>


<script>
    setTimeout(function () {
        $('#divMsg').fadeOut('fast');
    }, 3000);
    $(document).ready(function () {
        $('a').removeClass('active');
        $('li').removeClass('menu-open');
        $("#liMaster").addClass('menu-open');
        $("#aMaster").addClass('active');
        $("#aVCardMaster").addClass('active');

        $('#custom-tabs-three-home-tab').addClass('active');

    });

    $('#btn_add').click(function () {
        $('#modalHeader').text('Add Visitor Card');
        $.ajax({
            url: "/VisitorCard/AddVisitorCardMaster",
            type: "Get",
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            success: function (result) {
                //console.log(result);
                $('#MapPopup').modal({ backdrop: 'static' });//, keyboard: false
                $('#AddList').empty();
                $('#AddList').append(result);
                $('#MapPopup').modal('show');
            },
            failure: function (result) {
                alert('Fail To Load data');
            },
            error: function (result) {
            }
        });
    });


</script>

